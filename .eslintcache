[{"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx":"1","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts":"2","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx":"3","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx":"4","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\store.ts":"5","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\App.tsx":"6","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\app-reducer.ts":"7","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\tasks-reducer.ts":"8","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\todolists-reducer.ts":"9","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\selectors\\selectors.ts":"10","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\errorSnackBar\\ErrorSnackbar.tsx":"11","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\addItemForm\\AddItemForm.tsx":"12","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\server-api\\todolists-api.ts":"13","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\Task.tsx":"14","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\editableSpan\\EditableSpan.tsx":"15","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\error-utils.ts":"16","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\InterfaceApp\\InterfaceApp.tsx":"17","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPageContainer.tsx":"18","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPage.tsx":"19","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\TodolistContainer.tsx":"20","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\Todolist.tsx":"21","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\TaskContainer.tsx":"22"},{"size":587,"mtime":1627765347770,"results":"23","hashOfConfig":"24"},{"size":482,"mtime":1627763715655,"results":"25","hashOfConfig":"24"},{"size":704,"mtime":1627763629920,"results":"26","hashOfConfig":"24"},{"size":5286,"mtime":1627763263823,"results":"27","hashOfConfig":"24"},{"size":592,"mtime":1627763602156,"results":"28","hashOfConfig":"24"},{"size":828,"mtime":1627763615470,"results":"29","hashOfConfig":"24"},{"size":4998,"mtime":1627763066865,"results":"30","hashOfConfig":"24"},{"size":10092,"mtime":1627763460287,"results":"31","hashOfConfig":"24"},{"size":6059,"mtime":1627763575272,"results":"32","hashOfConfig":"24"},{"size":265,"mtime":1627340513692,"results":"33","hashOfConfig":"24"},{"size":1047,"mtime":1627763673847,"results":"34","hashOfConfig":"24"},{"size":1664,"mtime":1627763697146,"results":"35","hashOfConfig":"24"},{"size":3215,"mtime":1627763243171,"results":"36","hashOfConfig":"24"},{"size":1561,"mtime":1627762668074,"results":"37","hashOfConfig":"24"},{"size":1450,"mtime":1627763685947,"results":"38","hashOfConfig":"24"},{"size":896,"mtime":1627763679862,"results":"39","hashOfConfig":"24"},{"size":2502,"mtime":1627340513646,"results":"40","hashOfConfig":"24"},{"size":987,"mtime":1627763666885,"results":"41","hashOfConfig":"24"},{"size":1668,"mtime":1627763662712,"results":"42","hashOfConfig":"24"},{"size":2104,"mtime":1627763647808,"results":"43","hashOfConfig":"24"},{"size":3737,"mtime":1627763656259,"results":"44","hashOfConfig":"24"},{"size":2166,"mtime":1627762497584,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"1m9ez5e",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx",["98"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\r\nimport App from \"./main/ui/app/App\";\r\nimport { store } from \"./main/bll/store\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx",["99"],"import React from \"react\";\r\nimport {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    TextField,\r\n    Button,\r\n    Grid,\r\n} from \"@material-ui/core\";\r\nimport { useFormik } from \"formik\";\r\nimport Paper from \"@material-ui/core/Paper/Paper\";\r\nimport { LoginingDataType } from \"../../../main/server-api/todolists-api\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype LoginingPropsType = {\r\n    loginIn: (loginingData: LoginingDataType) => void;\r\n    isLoginig: boolean;\r\n};\r\n\r\ntype FormErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n};\r\n\r\nexport const Logining: React.FunctionComponent<LoginingPropsType> = (props) => {\r\n    const { loginIn, isLoginig } = props;\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n            captcha: true,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"This field required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"This field required\";\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            loginIn(values);\r\n        },\r\n    });\r\n\r\n    if (isLoginig) return <Redirect to={\"/\"} />;\r\n\r\n    return (\r\n        <Grid container direction={\"column\"} justify={\"center\"} alignItems={\"center\"}>\r\n            <Grid item xs={4} style={{ marginTop: \"100px\" }}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Paper style={{ padding: \"10px\" }} elevation={3}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <p>\r\n                                    To log in get registered\r\n                                    <a\r\n                                        href={\"https://social-network.samuraijs.com/\"}\r\n                                        target={\"_blank\"}\r\n                                    >\r\n                                        here\r\n                                    </a>\r\n                                </p>\r\n                                <p>or use common test account credentials:</p>\r\n                                <p>Email: free@samuraijs.com</p>\r\n                                <p>Password: free</p>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    name={\"email\"}\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.email && formik.errors.email ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    name={\"password\"}\r\n                                    value={formik.values.password}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.password && formik.errors.password ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <FormControlLabel\r\n                                    label={\"Remember me\"}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            name={\"rememberMe\"}\r\n                                            value={formik.values.rememberMe}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    }\r\n                                />\r\n                                <Button\r\n                                    type={\"submit\"}\r\n                                    variant={\"contained\"}\r\n                                    color={\"primary\"}\r\n                                    onClick={formik.submitForm}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </Paper>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\store.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\App.tsx",["100"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { initialized, logout } from \"../../bll/reducers/app-reducer\";\r\nimport { getAppState } from \"../../../utils/selectors/selectors\";\r\nimport InterfaceApp from \"./InterfaceApp/InterfaceApp\";\r\n\r\nconst App: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initialized());\r\n    }, []);\r\n\r\n    const { status, isInitialized, isLogining } = useSelector(getAppState);\r\n\r\n    const logoutMe = () => {\r\n        dispatch(logout());\r\n    };\r\n\r\n    return (\r\n        <InterfaceApp\r\n            isInitialized={isInitialized}\r\n            isLogining={isLogining}\r\n            logoutMe={logoutMe}\r\n            status={status}\r\n        />\r\n    );\r\n};\r\n\r\nexport default App;\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\app-reducer.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\tasks-reducer.ts",["101"],"import {\r\n    AddTodolistType,\r\n    changeTodolistEntityStatus,\r\n    ChangeTodolistEntityStatusType,\r\n    RemoveTodolistType,\r\n    SetTodolistType,\r\n} from \"./todolists-reducer\";\r\nimport { TaskStatuses, TaskType, todolistsAPI } from \"../../server-api/todolists-api\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AppRootStateType } from \"../store\";\r\nimport {\r\n    changeLoadingStatus,\r\n    ChangeLoadingStatusType,\r\n    RequestStatusType,\r\n    setAppError,\r\n    SetAppErrorType,\r\n} from \"./app-reducer\";\r\nimport {\r\n    handleServerAppError,\r\n    handleServerNetworkError,\r\n} from \"../../../utils/features/errors/error-utils\";\r\n\r\nexport type TaskStateRootType = TaskType & {\r\n    entityStatus: RequestStatusType;\r\n};\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskStateRootType>;\r\n};\r\nexport type RemoveTaskType = ReturnType<typeof removeTask>;\r\nexport type AddTaskType = ReturnType<typeof addTask>;\r\nexport type ChangeTaskStatusType = ReturnType<typeof changeTaskStatus>;\r\nexport type ChangeTaskTitleType = ReturnType<typeof changeTaskTitle>;\r\nexport type SetTasksType = ReturnType<typeof setTasks>;\r\nexport type ChangeTaskEntityStatusType = ReturnType<typeof changeTaskEntityStatus>;\r\nexport type TodolistThunkCreatorType = ThunkAction<\r\n    Promise<void>,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType\r\n>;\r\ntype ActionsType =\r\n    | RemoveTaskType\r\n    | AddTaskType\r\n    | ChangeTaskStatusType\r\n    | ChangeTaskTitleType\r\n    | AddTodolistType\r\n    | RemoveTodolistType\r\n    | SetTodolistType\r\n    | SetTasksType\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\n    | ChangeTaskEntityStatusType;\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = { ...state };\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter((t) => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopyThree = { ...state };\r\n            const tasks = stateCopyThree[action.task.todoListId];\r\n            const uppdateTask: TaskStateRootType = { ...action.task, entityStatus: \"idle\" };\r\n            const newTasks = [uppdateTask, ...tasks];\r\n            stateCopyThree[action.task.todoListId] = newTasks;\r\n            return stateCopyThree;\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks.map((t) =>\r\n                t.id === action.taskId ? { ...t, status: action.status } : t\r\n            );\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return { ...state };\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks.map((t) =>\r\n                t.id === action.taskId ? { ...t, title: action.title } : t\r\n            );\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return { ...state };\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: [],\r\n            };\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = { ...state };\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODO\":\r\n            const stateCopy = { ...state };\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = [];\r\n            });\r\n            return stateCopy;\r\n        case \"SET-TASKS\":\r\n            const stateCopyTwo = { ...state };\r\n            const tasksFromCurrentTodo = [...action.tasks];\r\n            const updateTasks: Array<TaskStateRootType> = tasksFromCurrentTodo.map((t) => ({\r\n                ...t,\r\n                entityStatus: \"idle\",\r\n            }));\r\n            stateCopyTwo[action.todolistId] = updateTasks;\r\n            return stateCopyTwo;\r\n        case \"CHANGE-ENTITYSTATUS-TASK\":\r\n            const task = state[action.todoId].find((t) => t.id === action.taskId);\r\n            if (task) {\r\n                task.entityStatus = action.entityStatus;\r\n            }\r\n            return { ...state };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const removeTask = (taskId: string, todolistId: string) => {\r\n    return { type: \"REMOVE-TASK\", taskId, todolistId } as const;\r\n};\r\nexport const addTask = (task: TaskType, todolistId: string) => {\r\n    return { type: \"ADD-TASK\", task, todolistId } as const;\r\n};\r\nexport const changeTaskStatus = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return { type: \"CHANGE-TASK-STATUS\", status, todolistId, taskId } as const;\r\n};\r\nexport const changeTaskTitle = (taskId: string, title: string, todolistId: string) => {\r\n    return { type: \"CHANGE-TASK-TITLE\", title, todolistId, taskId } as const;\r\n};\r\nexport const setTasks = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return { type: \"SET-TASKS\", tasks, todolistId } as const;\r\n};\r\nexport const changeTaskEntityStatus = (\r\n    todoId: string,\r\n    taskId: string,\r\n    entityStatus: RequestStatusType\r\n) => ({ type: \"CHANGE-ENTITYSTATUS-TASK\", todoId, taskId, entityStatus } as const);\r\n\r\nexport const setTasksThunk = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"));\r\n    todolistsAPI.getTasks(todolistId).then((resp) => {\r\n        dispatch(setTasks(resp.data.items, todolistId));\r\n        dispatch(changeLoadingStatus(\"succeeded\"));\r\n    });\r\n};\r\nexport const deleteTasksThunk = (todolistId: string, taskID: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"));\r\n    dispatch(changeTaskEntityStatus(todolistId, taskID, \"loading\"));\r\n    todolistsAPI.deleteTask(todolistId, taskID).then(() => {\r\n        dispatch(removeTask(taskID, todolistId));\r\n        dispatch(changeLoadingStatus(\"succeeded\"));\r\n        dispatch(changeTaskEntityStatus(todolistId, taskID, \"succeeded\"));\r\n    });\r\n};\r\nexport const addTaskThunk = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"));\r\n    dispatch(changeTodolistEntityStatus(todolistId, \"loading\"));\r\n    todolistsAPI\r\n        .createTask(todolistId, taskTitile)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTask(res.data.data.item, todolistId));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n            dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"));\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n            dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"));\r\n        });\r\n};\r\nexport const changeTaskStatusThunk = (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodo = allTasksFromState[todolistId];\r\n        const currentTask = tasksForCurrentTodo.find((t) => t.id === taskId);\r\n        if (currentTask) {\r\n            dispatch(changeLoadingStatus(\"loading\"));\r\n            dispatch(changeTaskEntityStatus(todolistId, taskId, \"loading\"));\r\n            todolistsAPI\r\n                .updateTask(todolistId, taskId, {\r\n                    title: currentTask.title,\r\n                    startDate: currentTask.startDate,\r\n                    priority: currentTask.priority,\r\n                    description: currentTask.description,\r\n                    deadline: currentTask.deadline,\r\n                    status: status,\r\n                })\r\n                .then(() => {\r\n                    dispatch(changeTaskStatus(taskId, status, todolistId));\r\n                    dispatch(changeLoadingStatus(\"succeeded\"));\r\n                    dispatch(changeTaskEntityStatus(todolistId, taskId, \"succeeded\"));\r\n                });\r\n        }\r\n    };\r\n};\r\nexport const changeTaskTitleThunk = (todolistId: string, taskId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodo = allTasksFromState[todolistId];\r\n        const currentTask = tasksForCurrentTodo.find((t) => t.id === taskId);\r\n        if (currentTask) {\r\n            dispatch(changeLoadingStatus(\"loading\"));\r\n            dispatch(changeTaskEntityStatus(todolistId, taskId, \"loading\"));\r\n            todolistsAPI\r\n                .updateTask(todolistId, taskId, {\r\n                    title: title,\r\n                    startDate: currentTask.startDate,\r\n                    priority: currentTask.priority,\r\n                    description: currentTask.description,\r\n                    deadline: currentTask.deadline,\r\n                    status: currentTask.status,\r\n                })\r\n                .then((resp) => {\r\n                    if (resp.data.resultCode === 0) {\r\n                        dispatch(changeTaskTitle(taskId, title, todolistId));\r\n                    } else {\r\n                        handleServerAppError(resp.data, dispatch);\r\n                    }\r\n                    dispatch(changeLoadingStatus(\"succeeded\"));\r\n                    dispatch(changeTaskEntityStatus(todolistId, taskId, \"succeeded\"));\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch);\r\n                    dispatch(changeLoadingStatus(\"succeeded\"));\r\n                    dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"));\r\n                });\r\n        }\r\n    };\r\n};\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\todolists-reducer.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\selectors\\selectors.ts",[],["102","103"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\errorSnackBar\\ErrorSnackbar.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\addItemForm\\AddItemForm.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\server-api\\todolists-api.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\Task.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\editableSpan\\EditableSpan.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\error-utils.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\InterfaceApp\\InterfaceApp.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPageContainer.tsx",["104"],"import React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAppState, getTodoState } from \"../../../selectors/selectors\";\r\nimport { addTodoThunk, setTodoThunk } from \"../../../../main/bll/reducers/todolists-reducer\";\r\nimport TodolistsPage from \"./TodolistsPage\";\r\n\r\nconst TodolistsContainer: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (isLogining) {\r\n            dispatch(setTodoThunk());\r\n        } else return;\r\n    }, []);\r\n\r\n    const [...todolists] = useSelector(getTodoState);\r\n    const { isLogining } = useSelector(getAppState);\r\n\r\n    const addTodolist = useCallback(\r\n        (title: string) => {\r\n            dispatch(addTodoThunk(title));\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    return (\r\n        <TodolistsPage addTodolist={addTodolist} isLogining={isLogining} todolists={todolists} />\r\n    );\r\n};\r\n\r\nexport default TodolistsContainer;\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPage.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\TodolistContainer.tsx",["105","106","107","108","109"],"import React, { useCallback, useEffect } from \"react\";\r\nimport {\r\n    changeTitleTodoThunk,\r\n    changeTodolistFilter,\r\n    deleteTodoThunk,\r\n    FilterValuesType,\r\n} from \"../../../../main/bll/reducers/todolists-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addTaskThunk, setTasksThunk } from \"../../../../main/bll/reducers/tasks-reducer\";\r\nimport Todolist from \"./Todolist\";\r\nimport { getTaskState } from \"../../../selectors/selectors\";\r\nimport { RequestStatusType } from \"../../../../main/bll/reducers/app-reducer\";\r\n\r\ntype TodolistContPropsType = {\r\n    id: string;\r\n    entityStatus: RequestStatusType;\r\n    title: string;\r\n    filter: FilterValuesType;\r\n};\r\n\r\nconst TodolistContainer: React.FunctionComponent<TodolistContPropsType> = React.memo((props) => {\r\n    const { id, entityStatus, title, filter } = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksThunk(id));\r\n    }, [id]);\r\n\r\n    let allTasksFromState = useSelector(getTaskState);\r\n\r\n    let tasks = allTasksFromState[id];\r\n\r\n    const addTask = useCallback(\r\n        (title: string) => {\r\n            dispatch(addTaskThunk(id, title));\r\n        },\r\n        [id]\r\n    );\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(deleteTodoThunk(props.id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(\r\n        (title: string) => {\r\n            dispatch(changeTitleTodoThunk(id, title));\r\n        },\r\n        [id]\r\n    );\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilter(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    return (\r\n        <Todolist\r\n            id={id}\r\n            addTask={addTask}\r\n            changeFilter={changeFilter}\r\n            changeTodolistTitle={changeTodolistTitle}\r\n            entityStatus={entityStatus}\r\n            filter={filter}\r\n            removeTodolist={removeTodolist}\r\n            tasks={tasks}\r\n            title={title}\r\n        />\r\n    );\r\n});\r\n\r\nexport default TodolistContainer;\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\Todolist.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\TaskContainer.tsx",["110","111","112","113","114"],"import React, { ChangeEvent, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { RequestStatusType } from \"../../../main/bll/reducers/app-reducer\";\r\nimport {\r\n    changeTaskStatusThunk,\r\n    changeTaskTitleThunk,\r\n    deleteTasksThunk,\r\n} from \"../../../main/bll/reducers/tasks-reducer\";\r\nimport { TaskStatuses, TaskType } from \"../../../main/server-api/todolists-api\";\r\nimport Task from \"./Task\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType;\r\n    todolistId: string;\r\n    entityStatusForTask: RequestStatusType;\r\n};\r\n\r\nconst TasksContainer: React.FunctionComponent<TaskPropsType> = (props) => {\r\n    const { task, todolistId, entityStatusForTask } = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const changeStatus = useCallback(\r\n        (id: string, status: TaskStatuses, todolistId: string) => {\r\n            dispatch(changeTaskStatusThunk(todolistId, id, status));\r\n        },\r\n        [todolistId]\r\n    );\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleThunk(todolistId, id, newTitle));\r\n    }, []);\r\n\r\n    const onClickHandler = useCallback(\r\n        () => dispatch(deleteTasksThunk(todolistId, task.id)),\r\n        [todolistId, task.id]\r\n    );\r\n\r\n    const onChangeHandler = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            changeStatus(\r\n                task.id,\r\n                newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n                todolistId\r\n            );\r\n        },\r\n        [task.id, todolistId]\r\n    );\r\n\r\n    const onTitleChangeHandler = useCallback(\r\n        (newValue: string) => {\r\n            changeTaskTitle(task.id, newValue, todolistId);\r\n        },\r\n        [task.id, todolistId]\r\n    );\r\n\r\n    return (\r\n        <Task\r\n            task={task}\r\n            entityStatusForTask={entityStatusForTask}\r\n            onTitleChangeHandler={onTitleChangeHandler}\r\n            onClickHandler={onClickHandler}\r\n            onChangeHandler={onChangeHandler}\r\n        />\r\n    );\r\n};\r\n\r\nexport default TasksContainer;\r\n",{"ruleId":"115","severity":1,"message":"116","line":5,"column":10,"nodeType":"117","messageId":"118","endLine":5,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":65,"column":37,"nodeType":"121","endLine":68,"endColumn":38},{"ruleId":"122","severity":1,"message":"123","line":12,"column":8,"nodeType":"124","endLine":12,"endColumn":10,"suggestions":"125"},{"ruleId":"115","severity":1,"message":"126","line":16,"column":5,"nodeType":"117","messageId":"118","endLine":16,"endColumn":16},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"122","severity":1,"message":"131","line":14,"column":8,"nodeType":"124","endLine":14,"endColumn":10,"suggestions":"132"},{"ruleId":"122","severity":1,"message":"123","line":28,"column":8,"nodeType":"124","endLine":28,"endColumn":12,"suggestions":"133"},{"ruleId":"122","severity":1,"message":"134","line":38,"column":9,"nodeType":"124","endLine":38,"endColumn":13,"suggestions":"135"},{"ruleId":"122","severity":1,"message":"136","line":43,"column":8,"nodeType":"124","endLine":43,"endColumn":10,"suggestions":"137"},{"ruleId":"122","severity":1,"message":"134","line":49,"column":9,"nodeType":"124","endLine":49,"endColumn":13,"suggestions":"138"},{"ruleId":"122","severity":1,"message":"134","line":55,"column":8,"nodeType":"124","endLine":55,"endColumn":10,"suggestions":"139"},{"ruleId":"122","severity":1,"message":"134","line":27,"column":9,"nodeType":"124","endLine":27,"endColumn":21,"suggestions":"140"},{"ruleId":"122","severity":1,"message":"134","line":32,"column":8,"nodeType":"124","endLine":32,"endColumn":10,"suggestions":"141"},{"ruleId":"122","severity":1,"message":"134","line":36,"column":9,"nodeType":"124","endLine":36,"endColumn":30,"suggestions":"142"},{"ruleId":"122","severity":1,"message":"143","line":48,"column":9,"nodeType":"124","endLine":48,"endColumn":30,"suggestions":"144"},{"ruleId":"122","severity":1,"message":"145","line":55,"column":9,"nodeType":"124","endLine":55,"endColumn":30,"suggestions":"146"},"@typescript-eslint/no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["147"],"'setAppError' is defined but never used.","no-native-reassign",["148"],"no-negated-in-lhs",["149"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isLogining'. Either include them or remove the dependency array.",["150"],["151"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["152"],"React Hook useCallback has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["153"],["154"],["155"],["156"],["157"],["158"],"React Hook useCallback has a missing dependency: 'changeStatus'. Either include it or remove the dependency array.",["159"],"React Hook useCallback has a missing dependency: 'changeTaskTitle'. Either include it or remove the dependency array.",["160"],{"desc":"161","fix":"162"},"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"165","fix":"167"},{"desc":"168","fix":"169"},{"desc":"165","fix":"170"},{"desc":"161","fix":"171"},{"desc":"161","fix":"172"},{"desc":"161","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [dispatch]",{"range":"180","text":"181"},"Update the dependencies array to be: [dispatch, isLogining]",{"range":"182","text":"183"},"Update the dependencies array to be: [dispatch, id]",{"range":"184","text":"185"},{"range":"186","text":"185"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"187","text":"188"},{"range":"189","text":"185"},{"range":"190","text":"181"},{"range":"191","text":"181"},{"range":"192","text":"181"},"Update the dependencies array to be: [dispatch, todolistId, task.id]",{"range":"193","text":"194"},"Update the dependencies array to be: [changeStatus, task.id, todolistId]",{"range":"195","text":"196"},"Update the dependencies array to be: [changeTaskTitle, task.id, todolistId]",{"range":"197","text":"198"},[446,448],"[dispatch]",[551,553],"[dispatch, isLogining]",[961,965],"[dispatch, id]",[1203,1207],[1320,1322],"[dispatch, props.id]",[1480,1484],[1684,1686],[930,942],[1125,1127],[1246,1267],"[dispatch, todolistId, task.id]",[1623,1644],"[changeStatus, task.id, todolistId]",[1817,1838],"[changeTaskTitle, task.id, todolistId]"]