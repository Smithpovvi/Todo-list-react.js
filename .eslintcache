[{"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx":"1","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts":"2","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolist\\TodoListsContainer.tsx":"3","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx":"4","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx":"5","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\error-utils.ts":"6","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolist\\Todolist.tsx":"7","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\addItemForm\\AddItemForm.tsx":"8","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\store.ts":"9","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\selectors\\selectors.ts":"10","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\errorSnackBar\\ErrorSnackbar.tsx":"11","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\editableSpan\\EditableSpan.tsx":"12","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\Task.tsx":"13","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\App.tsx":"14","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\server-api\\todolists-api.ts":"15","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\app-reducer.ts":"16","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\tasks-reducer.ts":"17","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\todolists-reducer.ts":"18"},{"size":571,"mtime":1627252244019,"results":"19","hashOfConfig":"20"},{"size":440,"mtime":1627251859784,"results":"21","hashOfConfig":"20"},{"size":1745,"mtime":1627251205181,"results":"22","hashOfConfig":"20"},{"size":689,"mtime":1627251361978,"results":"23","hashOfConfig":"20"},{"size":5151,"mtime":1627251361886,"results":"24","hashOfConfig":"20"},{"size":849,"mtime":1627251361933,"results":"25","hashOfConfig":"20"},{"size":4022,"mtime":1627251362004,"results":"26","hashOfConfig":"20"},{"size":1633,"mtime":1627250482976,"results":"27","hashOfConfig":"20"},{"size":1061,"mtime":1627251204814,"results":"28","hashOfConfig":"20"},{"size":196,"mtime":1627251119109,"results":"29","hashOfConfig":"20"},{"size":1034,"mtime":1627251204830,"results":"30","hashOfConfig":"20"},{"size":1430,"mtime":1627251204881,"results":"31","hashOfConfig":"20"},{"size":2749,"mtime":1627251362034,"results":"32","hashOfConfig":"20"},{"size":2642,"mtime":1627252836768,"results":"33","hashOfConfig":"20"},{"size":3176,"mtime":1627233138259,"results":"34","hashOfConfig":"20"},{"size":4718,"mtime":1627252623908,"results":"35","hashOfConfig":"20"},{"size":9994,"mtime":1627252726520,"results":"36","hashOfConfig":"20"},{"size":6025,"mtime":1627252785348,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1m9ez5e",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx",[],["80","81"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolist\\TodoListsContainer.tsx",["82"],"import Grid from \"@material-ui/core/Grid/Grid\"\r\nimport Paper from \"@material-ui/core/Paper/Paper\"\r\nimport React, { useCallback, useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { AddItemForm } from \"../addItemForm/AddItemForm\"\r\nimport { getAppState, getTodoState } from \"../../selectors/selectors\"\r\nimport { addTodoThunk, setTodoThunk } from \"../../../main/bll/reducers/todolists-reducer\"\r\nimport { Todolist } from \"./Todolist\"\r\n\r\nconst TodoListsContainer: React.FunctionComponent = () => {\r\n    const [...todolists] = useSelector(getTodoState)\r\n    const { isLogining } = useSelector(getAppState)\r\n\r\n    useEffect(() => {\r\n        if (!isLogining) return\r\n        dispatch(setTodoThunk())\r\n    }, [])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodolist = useCallback(\r\n        (title: string) => {\r\n            dispatch(addTodoThunk(title))\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    if (!isLogining) return <Redirect to={\"/logining\"} />\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{ padding: \"20px\" }}>\r\n                <AddItemForm addItem={addTodolist} disabled={\"idle\"} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map((tl) => {\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper style={{ padding: \"10px\" }} elevation={3}>\r\n                                <Todolist id={tl.id} entityStatus={tl.entityStatus} />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoListsContainer\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx",["83"],"import React from \"react\"\r\nimport {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    TextField,\r\n    Button,\r\n    Grid,\r\n} from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport Paper from \"@material-ui/core/Paper/Paper\"\r\nimport { LoginingDataType } from \"../../../main/server-api/todolists-api\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\ntype LoginingPropsType = {\r\n    loginIn: (loginingData: LoginingDataType) => void\r\n    isLoginig: boolean\r\n}\r\n\r\ntype FormErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport const Logining: React.FunctionComponent<LoginingPropsType> = (props) => {\r\n    const { loginIn, isLoginig } = props\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = \"This field required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"This field required\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            loginIn(values)\r\n        },\r\n    })\r\n    if (isLoginig) return <Redirect to={\"/\"} />\r\n    return (\r\n        <Grid container direction={\"column\"} justify={\"center\"} alignItems={\"center\"}>\r\n            <Grid item xs={4} style={{ marginTop: \"100px\" }}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Paper style={{ padding: \"10px\" }} elevation={3}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <p>\r\n                                    To log in get registered\r\n                                    <a\r\n                                        href={\"https://social-network.samuraijs.com/\"}\r\n                                        target={\"_blank\"}\r\n                                    >\r\n                                        here\r\n                                    </a>\r\n                                </p>\r\n                                <p>or use common test account credentials:</p>\r\n                                <p>Email: free@samuraijs.com</p>\r\n                                <p>Password: free</p>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    name={\"email\"}\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.email && formik.errors.email ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    name={\"password\"}\r\n                                    value={formik.values.password}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.password && formik.errors.password ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <FormControlLabel\r\n                                    label={\"Remember me\"}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            name={\"rememberMe\"}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    }\r\n                                />\r\n                                <Button\r\n                                    type={\"submit\"}\r\n                                    variant={\"contained\"}\r\n                                    color={\"primary\"}\r\n                                    onClick={formik.submitForm}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </Paper>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\error-utils.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolist\\Todolist.tsx",["84","85","86","87","88"],"import React, { useCallback, useEffect } from \"react\"\r\nimport { AddItemForm } from \"../addItemForm/AddItemForm\"\r\nimport { EditableSpan } from \"../editableSpan/EditableSpan\"\r\nimport { Button, IconButton } from \"@material-ui/core\"\r\nimport { Delete } from \"@material-ui/icons\"\r\nimport { Task } from \"../tasks/Task\"\r\nimport { TaskStatuses } from \"../../../main/server-api/todolists-api\"\r\nimport { changeTitleTodoThunk, changeTodolistFilter, deleteTodoThunk, FilterValuesType, TodolistDomainType } from \"../../../main/bll/reducers/todolists-reducer\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { addTaskThunk, setTasksThunk, TasksStateType } from \"../../../main/bll/reducers/tasks-reducer\"\r\nimport { AppRootStateType } from \"../../../main/bll/store\"\r\nimport { RequestStatusType } from \"../../../main/bll/reducers/app-reducer\"\r\n\r\ntype PropsType = {\r\n    id: string\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>((state) => state.todolists)\r\n    const allTasksFromState = useSelector<AppRootStateType, TasksStateType>((state) => state.tasks)\r\n    let tasks = allTasksFromState[props.id]\r\n    let title = \"\"\r\n    let filter = \"\"\r\n    todolists.forEach((tl) => {\r\n        if (tl.id === props.id) {\r\n            title = tl.title\r\n            filter = tl.filter\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        dispatch(setTasksThunk(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback(\r\n        (title: string) => {\r\n            dispatch(addTaskThunk(props.id, title))\r\n        },\r\n        [props.id]\r\n    )\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(deleteTodoThunk(props.id))\r\n    }, [])\r\n    const changeTodolistTitle = useCallback(\r\n        (title: string) => {\r\n            dispatch(changeTitleTodoThunk(props.id, title))\r\n        },\r\n        [props.id]\r\n    )\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilter(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", props.id), [props.id, changeFilter])\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", props.id), [props.id, changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", props.id), [props.id, changeFilter])\r\n\r\n    if (filter === \"active\") {\r\n        tasks = tasks.filter((t) => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasks = tasks.filter((t) => t.status === TaskStatuses.Completed)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={title} onChange={changeTodolistTitle} entityStatusForTodo={props.entityStatus}/>\r\n                <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatus} />\r\n            <div>\r\n                {tasks.map((t) => (\r\n                    <Task key={t.id} task={t} todolistId={props.id} entityStatusForTask={t.entityStatus} />\r\n                ))}\r\n            </div>\r\n            <div style={{ paddingTop: \"10px\" }}>\r\n                <Button variant={filter === \"all\" ? \"outlined\" : \"text\"} onClick={onAllClickHandler} color={\"default\"}>\r\n                    All\r\n                </Button>\r\n                <Button variant={filter === \"active\" ? \"outlined\" : \"text\"} onClick={onActiveClickHandler} color={\"primary\"}>\r\n                    Active\r\n                </Button>\r\n                <Button variant={filter === \"completed\" ? \"outlined\" : \"text\"} onClick={onCompletedClickHandler} color={\"secondary\"}>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\addItemForm\\AddItemForm.tsx",["89","90","91"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled: \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled === \"loading\"}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled === \"loading\"}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\store.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\selectors\\selectors.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\errorSnackBar\\ErrorSnackbar.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\editableSpan\\EditableSpan.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\Task.tsx",["92","93","94","95","96"],"import React, { ChangeEvent, useCallback } from \"react\"\r\nimport { Checkbox, IconButton } from \"@material-ui/core\"\r\nimport { EditableSpan } from \"../editableSpan/EditableSpan\"\r\nimport { Delete } from \"@material-ui/icons\"\r\nimport { TaskStatuses, TaskType } from \"../../../main/server-api/todolists-api\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport {\r\n    changeTaskStatusThunk,\r\n    changeTaskTitleThunk,\r\n    deleteTasksThunk,\r\n} from \"../../../main/bll/reducers/tasks-reducer\"\r\nimport { RequestStatusType } from \"../../../main/bll/reducers/app-reducer\"\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    entityStatusForTask: RequestStatusType\r\n    entityStatusForTodo?: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(changeTaskStatusThunk(todolistId, id, status))\r\n    }, [])\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleThunk(todolistId, id, newTitle))\r\n    }, [])\r\n    const onClickHandler = useCallback(\r\n        () => dispatch(deleteTasksThunk(props.todolistId, props.task.id)),\r\n        [props.todolistId, props.task.id]\r\n    )\r\n\r\n    const onChangeHandler = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked\r\n            changeStatus(\r\n                props.task.id,\r\n                newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n                props.todolistId\r\n            )\r\n        },\r\n        [props.task.id, props.todolistId]\r\n    )\r\n\r\n    const onTitleChangeHandler = useCallback(\r\n        (newValue: string) => {\r\n            changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n        },\r\n        [props.task.id, props.todolistId]\r\n    )\r\n\r\n    return (\r\n        <div\r\n            key={props.task.id}\r\n            className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n        >\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n                disabled={props.entityStatusForTask === \"loading\"}\r\n            />\r\n            <EditableSpan\r\n                value={props.task.title}\r\n                onChange={onTitleChangeHandler}\r\n                entityStatusForTask={props.entityStatusForTask}\r\n            />\r\n            <IconButton onClick={onClickHandler} disabled={props.entityStatusForTask === \"loading\"}>\r\n                <Delete />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\App.tsx",["97"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\server-api\\todolists-api.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\app-reducer.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\tasks-reducer.ts",["98"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\todolists-reducer.ts",["99"],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":18,"column":8,"nodeType":"106","endLine":18,"endColumn":10,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":61,"column":37,"nodeType":"110","endLine":64,"endColumn":38},{"ruleId":"104","severity":1,"message":"111","line":34,"column":8,"nodeType":"106","endLine":34,"endColumn":10,"suggestions":"112"},{"ruleId":"104","severity":1,"message":"113","line":40,"column":9,"nodeType":"106","endLine":40,"endColumn":19,"suggestions":"114"},{"ruleId":"104","severity":1,"message":"115","line":45,"column":8,"nodeType":"106","endLine":45,"endColumn":10,"suggestions":"116"},{"ruleId":"104","severity":1,"message":"113","line":50,"column":9,"nodeType":"106","endLine":50,"endColumn":19,"suggestions":"117"},{"ruleId":"104","severity":1,"message":"113","line":56,"column":8,"nodeType":"106","endLine":56,"endColumn":10,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":2,"column":9,"nodeType":"121","messageId":"122","endLine":2,"endColumn":12},{"ruleId":"119","severity":1,"message":"123","line":2,"column":14,"nodeType":"121","messageId":"122","endLine":2,"endColumn":20},{"ruleId":"119","severity":1,"message":"124","line":2,"column":22,"nodeType":"121","messageId":"122","endLine":2,"endColumn":33},{"ruleId":"104","severity":1,"message":"113","line":24,"column":8,"nodeType":"106","endLine":24,"endColumn":10,"suggestions":"125"},{"ruleId":"104","severity":1,"message":"113","line":27,"column":8,"nodeType":"106","endLine":27,"endColumn":10,"suggestions":"126"},{"ruleId":"104","severity":1,"message":"113","line":30,"column":9,"nodeType":"106","endLine":30,"endColumn":42,"suggestions":"127"},{"ruleId":"104","severity":1,"message":"128","line":42,"column":9,"nodeType":"106","endLine":42,"endColumn":42,"suggestions":"129"},{"ruleId":"104","severity":1,"message":"130","line":49,"column":9,"nodeType":"106","endLine":49,"endColumn":42,"suggestions":"131"},{"ruleId":"104","severity":1,"message":"132","line":21,"column":8,"nodeType":"106","endLine":21,"endColumn":10,"suggestions":"133"},{"ruleId":"119","severity":1,"message":"134","line":16,"column":5,"nodeType":"121","messageId":"122","endLine":16,"endColumn":16},{"ruleId":"119","severity":1,"message":"134","line":12,"column":5,"nodeType":"121","messageId":"122","endLine":12,"endColumn":16},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'isLogining'. Either include them or remove the dependency array.","ArrayExpression",["137"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["138"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["139"],"React Hook useCallback has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["140"],["141"],["142"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.",["143"],["144"],["145"],"React Hook useCallback has a missing dependency: 'changeStatus'. Either include it or remove the dependency array.",["146"],"React Hook useCallback has a missing dependency: 'changeTaskTitle'. Either include it or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["148"],"'setAppError' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"151","fix":"153"},{"desc":"151","fix":"154"},{"desc":"151","fix":"155"},{"desc":"156","fix":"157"},{"desc":"156","fix":"158"},{"desc":"156","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"156","fix":"166"},"Update the dependencies array to be: [dispatch, isLogining]",{"range":"167","text":"168"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"169","text":"170"},{"range":"171","text":"170"},{"range":"172","text":"170"},{"range":"173","text":"170"},"Update the dependencies array to be: [dispatch]",{"range":"174","text":"175"},{"range":"176","text":"175"},{"range":"177","text":"175"},"Update the dependencies array to be: [dispatch, props.todolistId, props.task.id]",{"range":"178","text":"179"},"Update the dependencies array to be: [changeStatus, props.task.id, props.todolistId]",{"range":"180","text":"181"},"Update the dependencies array to be: [changeTaskTitle, props.task.id, props.todolistId]",{"range":"182","text":"183"},{"range":"184","text":"175"},[783,785],"[dispatch, isLogining]",[1541,1543],"[dispatch, props.id]",[1685,1695],[1806,1808],[1968,1978],[2175,2177],"[dispatch]",[988,990],[1163,1165],[1293,1326],"[dispatch, props.todolistId, props.task.id]",[1691,1724],"[changeStatus, props.task.id, props.todolistId]",[1907,1940],"[changeTaskTitle, props.task.id, props.todolistId]",[1118,1120]]