[{"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx":"1","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts":"2","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\store.ts":"3","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\App.tsx":"4","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\todolists-reducer.ts":"5","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\tasks-reducer.ts":"6","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\Todolist.tsx":"7","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\AddItemForm.tsx":"8","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\api\\todolists-api.ts":"9","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\Task.tsx":"10","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\EditableSpan.tsx":"11","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\app-reducer.ts":"12","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\ErrorSnackbar.tsx":"13","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\error-utils.ts":"14","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolist\\TodoListsContainer.tsx":"15","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx":"16","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx":"17","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\selectors.ts":"18"},{"size":535,"mtime":1627217372647,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":1622731440745,"results":"21","hashOfConfig":"20"},{"size":1034,"mtime":1623515384263,"results":"22","hashOfConfig":"20"},{"size":2551,"mtime":1627238453575,"results":"23","hashOfConfig":"20"},{"size":5984,"mtime":1623582932617,"results":"24","hashOfConfig":"20"},{"size":9955,"mtime":1623582609225,"results":"25","hashOfConfig":"20"},{"size":3902,"mtime":1623581257576,"results":"26","hashOfConfig":"20"},{"size":1633,"mtime":1623520047576,"results":"27","hashOfConfig":"20"},{"size":3176,"mtime":1627233138259,"results":"28","hashOfConfig":"20"},{"size":2678,"mtime":1623582672348,"results":"29","hashOfConfig":"20"},{"size":1411,"mtime":1623583118441,"results":"30","hashOfConfig":"20"},{"size":4740,"mtime":1627238297524,"results":"31","hashOfConfig":"20"},{"size":999,"mtime":1623517321852,"results":"32","hashOfConfig":"20"},{"size":813,"mtime":1627216816193,"results":"33","hashOfConfig":"20"},{"size":1727,"mtime":1627237771284,"results":"34","hashOfConfig":"20"},{"size":658,"mtime":1627232994768,"results":"35","hashOfConfig":"20"},{"size":5139,"mtime":1627232719934,"results":"36","hashOfConfig":"20"},{"size":189,"mtime":1627232917957,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1m9ez5e",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx",[],["80","81"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\store.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\App.tsx",["82"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\todolists-reducer.ts",["83"],"import { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { todolistsAPI, TodolistType } from \"../api/todolists-api\"\r\nimport { handleServerAppError, handleServerNetworkError } from \"../utils/error-utils\"\r\nimport {\r\n    changeLoadingStatus,\r\n    ChangeLoadingStatusType,\r\n    RequestStatusType,\r\n    setAppError,\r\n    SetAppErrorType,\r\n} from \"./app-reducer\"\r\nimport { AppRootStateType } from \"./store\"\r\n//\r\n//\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolist>\r\nexport type AddTodolistType = ReturnType<typeof addTodolist>\r\nexport type ChangeTodolistTitleType = ReturnType<typeof changeTodolistTitle>\r\nexport type ChangeTodolistFilterType = ReturnType<typeof changeTodolistFilter>\r\nexport type SetTodolistType = ReturnType<typeof setTodolist>\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatus>\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TodolistThunkCreatorType = ThunkAction<\r\n    Promise<void>,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType\r\n>\r\ntype ActionsType =\r\n    | RemoveTodolistType\r\n    | AddTodolistType\r\n    | ChangeTodolistTitleType\r\n    | ChangeTodolistFilterType\r\n    | SetTodolistType\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\n//\r\n//\r\nconst initialState: Array<TodolistDomainType> = []\r\n//\r\n//\r\nexport const todolistsReducer = (\r\n    state = initialState,\r\n    action: ActionsType\r\n): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter((tl) => tl.id !== action.id)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const filter: FilterValuesType = \"all\"\r\n            const entityStatus: RequestStatusType = \"idle\"\r\n            const newTodo = { ...action.todolist, filter: filter, entityStatus: entityStatus }\r\n            return [...state, newTodo]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            const todolist = state.find((tl) => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const todolist = state.find((tl) => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"SET-TODO\":\r\n            return action.todos.map((tl) => ({ ...tl, filter: \"all\", entityStatus: \"idle\" }))\r\n        case \"CHANGE-ENTITYSTATUS\":\r\n            const todolist = state.find((tl) => tl.id === action.todoId)\r\n            if (todolist) {\r\n                todolist.entityStatus = action.entityStatus\r\n            }\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//\r\n//\r\nexport const removeTodolist = (todolistId: string) => {\r\n    return { type: \"REMOVE-TODOLIST\", id: todolistId } as const\r\n}\r\nexport const addTodolist = (todolist: TodolistType) => {\r\n    return { type: \"ADD-TODOLIST\", todolist } as const\r\n}\r\nexport const changeTodolistTitle = (id: string, title: string) => {\r\n    return { type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title } as const\r\n}\r\nexport const changeTodolistFilter = (id: string, filter: FilterValuesType) => {\r\n    return { type: \"CHANGE-TODOLIST-FILTER\", id: id, filter: filter } as const\r\n}\r\nexport const setTodolist = (todos: Array<TodolistType>) => ({ type: \"SET-TODO\", todos } as const)\r\nexport const changeTodolistEntityStatus = (todoId: string, entityStatus: RequestStatusType) =>\r\n    ({ type: \"CHANGE-ENTITYSTATUS\", todoId, entityStatus } as const)\r\n//\r\n//\r\nexport const setTodoThunk = () => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    todolistsAPI.getTodolists().then((resp) => {\r\n        dispatch(setTodolist(resp.data))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n    })\r\n}\r\nexport const addTodoThunk = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    todolistsAPI\r\n        .createTodolist(title)\r\n        .then((resp) => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(addTodolist(resp.data.data.item))\r\n            } else {\r\n                handleServerAppError(resp.data, dispatch)\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        })\r\n}\r\nexport const deleteTodoThunk = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(id, \"loading\"))\r\n    todolistsAPI.deleteTodolist(id).then(() => {\r\n        dispatch(removeTodolist(id))\r\n        dispatch(changeTodolistEntityStatus(id, \"idle\"))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n    })\r\n}\r\nexport const changeTitleTodoThunk = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(id, \"loading\"))\r\n    todolistsAPI\r\n        .updateTodolist(id, title)\r\n        .then((resp) => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitle(id, title))\r\n                dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n            } else {\r\n                handleServerAppError(resp.data, dispatch)\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n        })\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\tasks-reducer.ts",["84"],"import {\r\n    AddTodolistType,\r\n    changeTodolistEntityStatus,\r\n    ChangeTodolistEntityStatusType,\r\n    RemoveTodolistType,\r\n    SetTodolistType,\r\n} from \"./todolists-reducer\"\r\nimport { TaskStatuses, TaskType, todolistsAPI } from \"../api/todolists-api\"\r\nimport { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { AppRootStateType } from \"./store\"\r\nimport {\r\n    changeLoadingStatus,\r\n    ChangeLoadingStatusType,\r\n    RequestStatusType,\r\n    setAppError,\r\n    SetAppErrorType,\r\n} from \"./app-reducer\"\r\nimport { handleServerAppError, handleServerNetworkError } from \"../utils/error-utils\"\r\n//\r\n//\r\ntype TaskStateRootType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskStateRootType>\r\n}\r\nexport type RemoveTaskType = ReturnType<typeof removeTask>\r\nexport type AddTaskType = ReturnType<typeof addTask>\r\nexport type ChangeTaskStatusType = ReturnType<typeof changeTaskStatus>\r\nexport type ChangeTaskTitleType = ReturnType<typeof changeTaskTitle>\r\nexport type SetTasksType = ReturnType<typeof setTasks>\r\nexport type ChangeTaskEntityStatusType = ReturnType<typeof changeTaskEntityStatus>\r\nexport type TodolistThunkCreatorType = ThunkAction<\r\n    Promise<void>,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType\r\n>\r\ntype ActionsType =\r\n    | RemoveTaskType\r\n    | AddTaskType\r\n    | ChangeTaskStatusType\r\n    | ChangeTaskTitleType\r\n    | AddTodolistType\r\n    | RemoveTodolistType\r\n    | SetTodolistType\r\n    | SetTasksType\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\n    | ChangeTaskEntityStatusType\r\n//\r\n//\r\nconst initialState: TasksStateType = {}\r\n//\r\n//\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = tasks.filter((t) => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopyThree = { ...state }\r\n            const tasks = stateCopyThree[action.task.todoListId]\r\n            const uppdateTask: TaskStateRootType = { ...action.task, entityStatus: \"idle\" }\r\n            const newTasks = [uppdateTask, ...tasks]\r\n            stateCopyThree[action.task.todoListId] = newTasks\r\n            return stateCopyThree\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todolistTasks = state[action.todolistId]\r\n            let newTasksArray = todolistTasks.map((t) =>\r\n                t.id === action.taskId ? { ...t, status: action.status } : t\r\n            )\r\n\r\n            state[action.todolistId] = newTasksArray\r\n            return { ...state }\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todolistTasks = state[action.todolistId]\r\n            let newTasksArray = todolistTasks.map((t) =>\r\n                t.id === action.taskId ? { ...t, title: action.title } : t\r\n            )\r\n\r\n            state[action.todolistId] = newTasksArray\r\n            return { ...state }\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: [],\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = { ...state }\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case \"SET-TODO\":\r\n            const stateCopy = { ...state }\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        case \"SET-TASKS\":\r\n            const stateCopyTwo = { ...state }\r\n            const tasksFromCurrentTodo = [...action.tasks]\r\n            const updateTasks: Array<TaskStateRootType> = tasksFromCurrentTodo.map((t) => ({\r\n                ...t,\r\n                entityStatus: \"idle\",\r\n            }))\r\n            stateCopyTwo[action.todolistId] = updateTasks\r\n            return stateCopyTwo\r\n        case \"CHANGE-ENTITYSTATUS-TASK\":\r\n            const task = state[action.todoId].find((t) => t.id === action.taskId)\r\n            if (task) {\r\n                task.entityStatus = action.entityStatus\r\n            }\r\n            return { ...state }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//\r\n//\r\nexport const removeTask = (taskId: string, todolistId: string) => {\r\n    return { type: \"REMOVE-TASK\", taskId, todolistId } as const\r\n}\r\nexport const addTask = (task: TaskType, todolistId: string) => {\r\n    return { type: \"ADD-TASK\", task, todolistId } as const\r\n}\r\nexport const changeTaskStatus = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return { type: \"CHANGE-TASK-STATUS\", status, todolistId, taskId } as const\r\n}\r\nexport const changeTaskTitle = (taskId: string, title: string, todolistId: string) => {\r\n    return { type: \"CHANGE-TASK-TITLE\", title, todolistId, taskId } as const\r\n}\r\nexport const setTasks = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return { type: \"SET-TASKS\", tasks, todolistId } as const\r\n}\r\nexport const changeTaskEntityStatus = (\r\n    todoId: string,\r\n    taskId: string,\r\n    entityStatus: RequestStatusType\r\n) => ({ type: \"CHANGE-ENTITYSTATUS-TASK\", todoId, taskId, entityStatus } as const)\r\n//\r\n//\r\nexport const setTasksThunk = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    todolistsAPI.getTasks(todolistId).then((resp) => {\r\n        dispatch(setTasks(resp.data.items, todolistId))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n    })\r\n}\r\nexport const deleteTasksThunk = (todolistId: string, taskID: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTaskEntityStatus(todolistId, taskID, \"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskID).then(() => {\r\n        dispatch(removeTask(taskID, todolistId))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n        dispatch(changeTaskEntityStatus(todolistId, taskID, \"succeeded\"))\r\n    })\r\n}\r\nexport const addTaskThunk = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(todolistId, \"loading\"))\r\n    todolistsAPI\r\n        .createTask(todolistId, taskTitile)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTask(res.data.data.item, todolistId))  \r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"))\r\n        })\r\n}\r\nexport const changeTaskStatusThunk = (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodo = allTasksFromState[todolistId]\r\n        const currentTask = tasksForCurrentTodo.find((t) => t.id === taskId)\r\n        if (currentTask) {\r\n            dispatch(changeLoadingStatus(\"loading\"))\r\n            dispatch(changeTaskEntityStatus(todolistId, taskId, \"loading\"))\r\n            todolistsAPI\r\n                .updateTask(todolistId, taskId, {\r\n                    title: currentTask.title,\r\n                    startDate: currentTask.startDate,\r\n                    priority: currentTask.priority,\r\n                    description: currentTask.description,\r\n                    deadline: currentTask.deadline,\r\n                    status: status,\r\n                })\r\n                .then(() => {\r\n                    dispatch(changeTaskStatus(taskId, status, todolistId))\r\n                    dispatch(changeLoadingStatus(\"succeeded\"))\r\n                    dispatch(changeTaskEntityStatus(todolistId, taskId, \"succeeded\"))\r\n                })\r\n        }\r\n    }\r\n}\r\nexport const changeTaskTitleThunk = (todolistId: string, taskId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodo = allTasksFromState[todolistId]\r\n        const currentTask = tasksForCurrentTodo.find((t) => t.id === taskId)\r\n        if (currentTask) {\r\n            dispatch(changeLoadingStatus(\"loading\"))\r\n            dispatch(changeTaskEntityStatus(todolistId, taskId, \"loading\"))\r\n            todolistsAPI\r\n                .updateTask(todolistId, taskId, {\r\n                    title: title,\r\n                    startDate: currentTask.startDate,\r\n                    priority: currentTask.priority,\r\n                    description: currentTask.description,\r\n                    deadline: currentTask.deadline,\r\n                    status: currentTask.status,\r\n                })\r\n                .then((resp) => {\r\n                    if (resp.data.resultCode === 0) {\r\n                        dispatch(changeTaskTitle(taskId, title, todolistId))\r\n                    } else {\r\n                        handleServerAppError(resp.data, dispatch)\r\n                    }\r\n                    dispatch(changeLoadingStatus(\"succeeded\"))\r\n                    dispatch(changeTaskEntityStatus(todolistId, taskId, \"succeeded\"))\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                    dispatch(changeLoadingStatus(\"succeeded\"))\r\n                    dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"))\r\n                })\r\n        }\r\n    }\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\Todolist.tsx",["85","86","87","88","89"],"import React, { useCallback, useEffect } from \"react\"\r\nimport { AddItemForm } from \"./AddItemForm\"\r\nimport { EditableSpan } from \"./EditableSpan\"\r\nimport { Button, IconButton } from \"@material-ui/core\"\r\nimport { Delete } from \"@material-ui/icons\"\r\nimport { Task } from \"./Task\"\r\nimport { TaskStatuses } from \"./api/todolists-api\"\r\nimport { changeTitleTodoThunk, changeTodolistFilter, deleteTodoThunk, FilterValuesType, TodolistDomainType } from \"./state/todolists-reducer\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { addTaskThunk, setTasksThunk, TasksStateType } from \"./state/tasks-reducer\"\r\nimport { AppRootStateType } from \"./state/store\"\r\nimport { RequestStatusType } from \"./state/app-reducer\"\r\n\r\ntype PropsType = {\r\n    id: string\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>((state) => state.todolists)\r\n    const allTasksFromState = useSelector<AppRootStateType, TasksStateType>((state) => state.tasks)\r\n    let tasks = allTasksFromState[props.id]\r\n    let title = \"\"\r\n    let filter = \"\"\r\n    todolists.forEach((tl) => {\r\n        if (tl.id === props.id) {\r\n            title = tl.title\r\n            filter = tl.filter\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        dispatch(setTasksThunk(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback(\r\n        (title: string) => {\r\n            dispatch(addTaskThunk(props.id, title))\r\n        },\r\n        [props.id]\r\n    )\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(deleteTodoThunk(props.id))\r\n    }, [])\r\n    const changeTodolistTitle = useCallback(\r\n        (title: string) => {\r\n            dispatch(changeTitleTodoThunk(props.id, title))\r\n        },\r\n        [props.id]\r\n    )\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilter(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", props.id), [props.id, changeFilter])\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", props.id), [props.id, changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", props.id), [props.id, changeFilter])\r\n\r\n    if (filter === \"active\") {\r\n        tasks = tasks.filter((t) => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasks = tasks.filter((t) => t.status === TaskStatuses.Completed)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={title} onChange={changeTodolistTitle} entityStatusForTodo={props.entityStatus}/>\r\n                <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatus} />\r\n            <div>\r\n                {tasks.map((t) => (\r\n                    <Task key={t.id} task={t} todolistId={props.id} entityStatusForTask={t.entityStatus} />\r\n                ))}\r\n            </div>\r\n            <div style={{ paddingTop: \"10px\" }}>\r\n                <Button variant={filter === \"all\" ? \"outlined\" : \"text\"} onClick={onAllClickHandler} color={\"default\"}>\r\n                    All\r\n                </Button>\r\n                <Button variant={filter === \"active\" ? \"outlined\" : \"text\"} onClick={onActiveClickHandler} color={\"primary\"}>\r\n                    Active\r\n                </Button>\r\n                <Button variant={filter === \"completed\" ? \"outlined\" : \"text\"} onClick={onCompletedClickHandler} color={\"secondary\"}>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\AddItemForm.tsx",["90","91","92"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled: \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled === \"loading\"}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled === \"loading\"}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\api\\todolists-api.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\Task.tsx",["93","94","95","96","97"],"import React, { ChangeEvent, useCallback } from \"react\"\r\nimport { Checkbox, IconButton } from \"@material-ui/core\"\r\nimport { EditableSpan } from \"./EditableSpan\"\r\nimport { Delete } from \"@material-ui/icons\"\r\nimport { TaskStatuses, TaskType } from \"./api/todolists-api\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport {\r\n    changeTaskStatusThunk,\r\n    changeTaskTitleThunk,\r\n    deleteTasksThunk,\r\n} from \"./state/tasks-reducer\"\r\nimport { RequestStatusType } from \"./state/app-reducer\"\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    entityStatusForTask: RequestStatusType\r\n    entityStatusForTodo?: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(changeTaskStatusThunk(todolistId, id, status))\r\n    }, [])\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleThunk(todolistId, id, newTitle))\r\n    }, [])\r\n    const onClickHandler = useCallback(\r\n        () => dispatch(deleteTasksThunk(props.todolistId, props.task.id)),\r\n        [props.todolistId, props.task.id]\r\n    )\r\n\r\n    const onChangeHandler = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked\r\n            changeStatus(\r\n                props.task.id,\r\n                newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n                props.todolistId\r\n            )\r\n        },\r\n        [props.task.id, props.todolistId]\r\n    )\r\n\r\n    const onTitleChangeHandler = useCallback(\r\n        (newValue: string) => {\r\n            changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n        },\r\n        [props.task.id, props.todolistId]\r\n    )\r\n\r\n    return (\r\n        <div\r\n            key={props.task.id}\r\n            className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n        >\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n                disabled={props.entityStatusForTask === \"loading\"}\r\n            />\r\n            <EditableSpan\r\n                value={props.task.title}\r\n                onChange={onTitleChangeHandler}\r\n                entityStatusForTask={props.entityStatusForTask}\r\n            />\r\n            <IconButton onClick={onClickHandler} disabled={props.entityStatusForTask === \"loading\"}>\r\n                <Delete />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\EditableSpan.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\app-reducer.ts",["98"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\ErrorSnackbar.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\error-utils.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolist\\TodoListsContainer.tsx",["99"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx",["100"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\selectors.ts",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":21,"column":8,"nodeType":"107","endLine":21,"endColumn":10,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":9,"column":5,"nodeType":"111","messageId":"112","endLine":9,"endColumn":16},{"ruleId":"109","severity":1,"message":"110","line":16,"column":5,"nodeType":"111","messageId":"112","endLine":16,"endColumn":16},{"ruleId":"105","severity":1,"message":"113","line":34,"column":8,"nodeType":"107","endLine":34,"endColumn":10,"suggestions":"114"},{"ruleId":"105","severity":1,"message":"115","line":40,"column":9,"nodeType":"107","endLine":40,"endColumn":19,"suggestions":"116"},{"ruleId":"105","severity":1,"message":"117","line":45,"column":8,"nodeType":"107","endLine":45,"endColumn":10,"suggestions":"118"},{"ruleId":"105","severity":1,"message":"115","line":50,"column":9,"nodeType":"107","endLine":50,"endColumn":19,"suggestions":"119"},{"ruleId":"105","severity":1,"message":"115","line":56,"column":8,"nodeType":"107","endLine":56,"endColumn":10,"suggestions":"120"},{"ruleId":"109","severity":1,"message":"121","line":2,"column":9,"nodeType":"111","messageId":"112","endLine":2,"endColumn":12},{"ruleId":"109","severity":1,"message":"122","line":2,"column":14,"nodeType":"111","messageId":"112","endLine":2,"endColumn":20},{"ruleId":"109","severity":1,"message":"123","line":2,"column":22,"nodeType":"111","messageId":"112","endLine":2,"endColumn":33},{"ruleId":"105","severity":1,"message":"115","line":24,"column":8,"nodeType":"107","endLine":24,"endColumn":10,"suggestions":"124"},{"ruleId":"105","severity":1,"message":"115","line":27,"column":8,"nodeType":"107","endLine":27,"endColumn":10,"suggestions":"125"},{"ruleId":"105","severity":1,"message":"115","line":30,"column":9,"nodeType":"107","endLine":30,"endColumn":42,"suggestions":"126"},{"ruleId":"105","severity":1,"message":"127","line":42,"column":9,"nodeType":"107","endLine":42,"endColumn":42,"suggestions":"128"},{"ruleId":"105","severity":1,"message":"129","line":49,"column":9,"nodeType":"107","endLine":49,"endColumn":42,"suggestions":"130"},{"ruleId":"109","severity":1,"message":"131","line":4,"column":10,"nodeType":"111","messageId":"112","endLine":4,"endColumn":22},{"ruleId":"105","severity":1,"message":"132","line":18,"column":8,"nodeType":"107","endLine":18,"endColumn":10,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":61,"column":37,"nodeType":"136","endLine":64,"endColumn":38},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["139"],"@typescript-eslint/no-unused-vars","'setAppError' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["140"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["141"],"React Hook useCallback has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["142"],["143"],["144"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.",["145"],["146"],["147"],"React Hook useCallback has a missing dependency: 'changeStatus'. Either include it or remove the dependency array.",["148"],"React Hook useCallback has a missing dependency: 'changeTaskTitle'. Either include it or remove the dependency array.",["149"],"'setTodoThunk' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'isLogining'. Either include them or remove the dependency array.",["150"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"153","fix":"155"},{"desc":"153","fix":"156"},{"desc":"153","fix":"157"},{"desc":"151","fix":"158"},{"desc":"151","fix":"159"},{"desc":"151","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},"Update the dependencies array to be: [dispatch]",{"range":"169","text":"170"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"171","text":"172"},{"range":"173","text":"172"},{"range":"174","text":"172"},{"range":"175","text":"172"},{"range":"176","text":"170"},{"range":"177","text":"170"},{"range":"178","text":"170"},"Update the dependencies array to be: [dispatch, props.todolistId, props.task.id]",{"range":"179","text":"180"},"Update the dependencies array to be: [changeStatus, props.task.id, props.todolistId]",{"range":"181","text":"182"},"Update the dependencies array to be: [changeTaskTitle, props.task.id, props.todolistId]",{"range":"183","text":"184"},"Update the dependencies array to be: [dispatch, isLogining]",{"range":"185","text":"186"},[1027,1029],"[dispatch]",[1421,1423],"[dispatch, props.id]",[1565,1575],[1686,1688],[1848,1858],[2055,2057],[917,919],[1092,1094],[1222,1255],"[dispatch, props.todolistId, props.task.id]",[1620,1653],"[changeStatus, props.task.id, props.todolistId]",[1836,1869],"[changeTaskTitle, props.task.id, props.todolistId]",[765,767],"[dispatch, isLogining]"]