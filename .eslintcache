[{"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx":"1","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts":"2","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\store.ts":"3","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\App.tsx":"4","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\todolists-reducer.ts":"5","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\tasks-reducer.ts":"6","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\Todolist.tsx":"7","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\AddItemForm.tsx":"8","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\api\\todolists-api.ts":"9","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\Task.tsx":"10","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\EditableSpan.tsx":"11","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\app-reducer.ts":"12","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\ErrorSnackbar.tsx":"13","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\error-utils.ts":"14","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolist\\TodoListsContainer.tsx":"15","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx":"16","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx":"17","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\selectors.ts":"18"},{"size":535,"mtime":1627217372647,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":1622731440745,"results":"21","hashOfConfig":"20"},{"size":1034,"mtime":1623515384263,"results":"22","hashOfConfig":"20"},{"size":2551,"mtime":1627238453575,"results":"23","hashOfConfig":"20"},{"size":5984,"mtime":1623582932617,"results":"24","hashOfConfig":"20"},{"size":9955,"mtime":1623582609225,"results":"25","hashOfConfig":"20"},{"size":3902,"mtime":1623581257576,"results":"26","hashOfConfig":"20"},{"size":1633,"mtime":1623520047576,"results":"27","hashOfConfig":"20"},{"size":3176,"mtime":1627233138259,"results":"28","hashOfConfig":"20"},{"size":2678,"mtime":1623582672348,"results":"29","hashOfConfig":"20"},{"size":1411,"mtime":1623583118441,"results":"30","hashOfConfig":"20"},{"size":4740,"mtime":1627238297524,"results":"31","hashOfConfig":"20"},{"size":999,"mtime":1623517321852,"results":"32","hashOfConfig":"20"},{"size":813,"mtime":1627216816193,"results":"33","hashOfConfig":"20"},{"size":1727,"mtime":1627237771284,"results":"34","hashOfConfig":"20"},{"size":658,"mtime":1627232994768,"results":"35","hashOfConfig":"20"},{"size":5139,"mtime":1627232719934,"results":"36","hashOfConfig":"20"},{"size":189,"mtime":1627232917957,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1m9ez5e",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx",[],["84","85"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\store.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\App.tsx",["86"],"import React, { useEffect } from \"react\"\r\nimport { Redirect, Route, Switch } from \"react-router-dom\"\r\nimport TodoListsContainer from \"./utils/features/todolist/TodoListsContainer\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { initialized, logout } from \"./state/app-reducer\"\r\nimport { ErrorSnackbar } from \"./ErrorSnackbar\"\r\nimport AppBar from \"@material-ui/core/AppBar/AppBar\"\r\nimport Toolbar from \"@material-ui/core/Toolbar/Toolbar\"\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\"\r\nimport { Menu } from \"@material-ui/icons\"\r\nimport Button from \"@material-ui/core/Button/Button\"\r\nimport LinearProgress from \"@material-ui/core/LinearProgress/LinearProgress\"\r\nimport Container from \"@material-ui/core/Container/Container\"\r\nimport LoginingContainer from \"./utils/features/logining/LoginingContainer\"\r\nimport { getAppState } from \"./selectors\"\r\n\r\nconst App: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initialized())\r\n    }, [])\r\n    const { status, isInitialized, isLogining } = useSelector(getAppState)\r\n    const logoutMe = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant={\"dense\"} style={{ backgroundColor: \"#00418c\" }}>\r\n                    {isLogining && (\r\n                        <>\r\n                            <IconButton edge=\"start\" color=\"secondary\" aria-label=\"menu\">\r\n                                <Menu />\r\n                            </IconButton>\r\n\r\n                            <Button color=\"inherit\" onClick={logoutMe}>\r\n                                Logout\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress color={\"secondary\"} />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                {!isInitialized ? (\r\n                    <div></div>\r\n                ) : (\r\n                    <Switch>\r\n                        <Route exact path=\"/\" render={() => <TodoListsContainer />} />\r\n                        <Route path=\"/logining\" render={() => <LoginingContainer />} />\r\n                        <Route path={\"/404\"} render={() => <h1>404: PAGE NOT FOUND</h1>} />\r\n                        <Redirect from={\"*\"} to={\"/404\"} />\r\n                    </Switch>\r\n                )}\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\todolists-reducer.ts",["87"],"import { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { todolistsAPI, TodolistType } from \"../api/todolists-api\"\r\nimport { handleServerAppError, handleServerNetworkError } from \"../utils/error-utils\"\r\nimport {\r\n    changeLoadingStatus,\r\n    ChangeLoadingStatusType,\r\n    RequestStatusType,\r\n    setAppError,\r\n    SetAppErrorType,\r\n} from \"./app-reducer\"\r\nimport { AppRootStateType } from \"./store\"\r\n//\r\n//\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolist>\r\nexport type AddTodolistType = ReturnType<typeof addTodolist>\r\nexport type ChangeTodolistTitleType = ReturnType<typeof changeTodolistTitle>\r\nexport type ChangeTodolistFilterType = ReturnType<typeof changeTodolistFilter>\r\nexport type SetTodolistType = ReturnType<typeof setTodolist>\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatus>\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TodolistThunkCreatorType = ThunkAction<\r\n    Promise<void>,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType\r\n>\r\ntype ActionsType =\r\n    | RemoveTodolistType\r\n    | AddTodolistType\r\n    | ChangeTodolistTitleType\r\n    | ChangeTodolistFilterType\r\n    | SetTodolistType\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\n//\r\n//\r\nconst initialState: Array<TodolistDomainType> = []\r\n//\r\n//\r\nexport const todolistsReducer = (\r\n    state = initialState,\r\n    action: ActionsType\r\n): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter((tl) => tl.id !== action.id)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const filter: FilterValuesType = \"all\"\r\n            const entityStatus: RequestStatusType = \"idle\"\r\n            const newTodo = { ...action.todolist, filter: filter, entityStatus: entityStatus }\r\n            return [...state, newTodo]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            const todolist = state.find((tl) => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const todolist = state.find((tl) => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"SET-TODO\":\r\n            return action.todos.map((tl) => ({ ...tl, filter: \"all\", entityStatus: \"idle\" }))\r\n        case \"CHANGE-ENTITYSTATUS\":\r\n            const todolist = state.find((tl) => tl.id === action.todoId)\r\n            if (todolist) {\r\n                todolist.entityStatus = action.entityStatus\r\n            }\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//\r\n//\r\nexport const removeTodolist = (todolistId: string) => {\r\n    return { type: \"REMOVE-TODOLIST\", id: todolistId } as const\r\n}\r\nexport const addTodolist = (todolist: TodolistType) => {\r\n    return { type: \"ADD-TODOLIST\", todolist } as const\r\n}\r\nexport const changeTodolistTitle = (id: string, title: string) => {\r\n    return { type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title } as const\r\n}\r\nexport const changeTodolistFilter = (id: string, filter: FilterValuesType) => {\r\n    return { type: \"CHANGE-TODOLIST-FILTER\", id: id, filter: filter } as const\r\n}\r\nexport const setTodolist = (todos: Array<TodolistType>) => ({ type: \"SET-TODO\", todos } as const)\r\nexport const changeTodolistEntityStatus = (todoId: string, entityStatus: RequestStatusType) =>\r\n    ({ type: \"CHANGE-ENTITYSTATUS\", todoId, entityStatus } as const)\r\n//\r\n//\r\nexport const setTodoThunk = () => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    todolistsAPI.getTodolists().then((resp) => {\r\n        dispatch(setTodolist(resp.data))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n    })\r\n}\r\nexport const addTodoThunk = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    todolistsAPI\r\n        .createTodolist(title)\r\n        .then((resp) => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(addTodolist(resp.data.data.item))\r\n            } else {\r\n                handleServerAppError(resp.data, dispatch)\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        })\r\n}\r\nexport const deleteTodoThunk = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(id, \"loading\"))\r\n    todolistsAPI.deleteTodolist(id).then(() => {\r\n        dispatch(removeTodolist(id))\r\n        dispatch(changeTodolistEntityStatus(id, \"idle\"))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n    })\r\n}\r\nexport const changeTitleTodoThunk = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(id, \"loading\"))\r\n    todolistsAPI\r\n        .updateTodolist(id, title)\r\n        .then((resp) => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitle(id, title))\r\n                dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n            } else {\r\n                handleServerAppError(resp.data, dispatch)\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n        })\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\tasks-reducer.ts",["88"],"import {\r\n    AddTodolistType,\r\n    changeTodolistEntityStatus,\r\n    ChangeTodolistEntityStatusType,\r\n    RemoveTodolistType,\r\n    SetTodolistType,\r\n} from \"./todolists-reducer\"\r\nimport { TaskStatuses, TaskType, todolistsAPI } from \"../api/todolists-api\"\r\nimport { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { AppRootStateType } from \"./store\"\r\nimport {\r\n    changeLoadingStatus,\r\n    ChangeLoadingStatusType,\r\n    RequestStatusType,\r\n    setAppError,\r\n    SetAppErrorType,\r\n} from \"./app-reducer\"\r\nimport { handleServerAppError, handleServerNetworkError } from \"../utils/error-utils\"\r\n//\r\n//\r\ntype TaskStateRootType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskStateRootType>\r\n}\r\nexport type RemoveTaskType = ReturnType<typeof removeTask>\r\nexport type AddTaskType = ReturnType<typeof addTask>\r\nexport type ChangeTaskStatusType = ReturnType<typeof changeTaskStatus>\r\nexport type ChangeTaskTitleType = ReturnType<typeof changeTaskTitle>\r\nexport type SetTasksType = ReturnType<typeof setTasks>\r\nexport type ChangeTaskEntityStatusType = ReturnType<typeof changeTaskEntityStatus>\r\nexport type TodolistThunkCreatorType = ThunkAction<\r\n    Promise<void>,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType\r\n>\r\ntype ActionsType =\r\n    | RemoveTaskType\r\n    | AddTaskType\r\n    | ChangeTaskStatusType\r\n    | ChangeTaskTitleType\r\n    | AddTodolistType\r\n    | RemoveTodolistType\r\n    | SetTodolistType\r\n    | SetTasksType\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\n    | ChangeTaskEntityStatusType\r\n//\r\n//\r\nconst initialState: TasksStateType = {}\r\n//\r\n//\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = tasks.filter((t) => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopyThree = { ...state }\r\n            const tasks = stateCopyThree[action.task.todoListId]\r\n            const uppdateTask: TaskStateRootType = { ...action.task, entityStatus: \"idle\" }\r\n            const newTasks = [uppdateTask, ...tasks]\r\n            stateCopyThree[action.task.todoListId] = newTasks\r\n            return stateCopyThree\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todolistTasks = state[action.todolistId]\r\n            let newTasksArray = todolistTasks.map((t) =>\r\n                t.id === action.taskId ? { ...t, status: action.status } : t\r\n            )\r\n\r\n            state[action.todolistId] = newTasksArray\r\n            return { ...state }\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todolistTasks = state[action.todolistId]\r\n            let newTasksArray = todolistTasks.map((t) =>\r\n                t.id === action.taskId ? { ...t, title: action.title } : t\r\n            )\r\n\r\n            state[action.todolistId] = newTasksArray\r\n            return { ...state }\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: [],\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = { ...state }\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case \"SET-TODO\":\r\n            const stateCopy = { ...state }\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        case \"SET-TASKS\":\r\n            const stateCopyTwo = { ...state }\r\n            const tasksFromCurrentTodo = [...action.tasks]\r\n            const updateTasks: Array<TaskStateRootType> = tasksFromCurrentTodo.map((t) => ({\r\n                ...t,\r\n                entityStatus: \"idle\",\r\n            }))\r\n            stateCopyTwo[action.todolistId] = updateTasks\r\n            return stateCopyTwo\r\n        case \"CHANGE-ENTITYSTATUS-TASK\":\r\n            const task = state[action.todoId].find((t) => t.id === action.taskId)\r\n            if (task) {\r\n                task.entityStatus = action.entityStatus\r\n            }\r\n            return { ...state }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//\r\n//\r\nexport const removeTask = (taskId: string, todolistId: string) => {\r\n    return { type: \"REMOVE-TASK\", taskId, todolistId } as const\r\n}\r\nexport const addTask = (task: TaskType, todolistId: string) => {\r\n    return { type: \"ADD-TASK\", task, todolistId } as const\r\n}\r\nexport const changeTaskStatus = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return { type: \"CHANGE-TASK-STATUS\", status, todolistId, taskId } as const\r\n}\r\nexport const changeTaskTitle = (taskId: string, title: string, todolistId: string) => {\r\n    return { type: \"CHANGE-TASK-TITLE\", title, todolistId, taskId } as const\r\n}\r\nexport const setTasks = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return { type: \"SET-TASKS\", tasks, todolistId } as const\r\n}\r\nexport const changeTaskEntityStatus = (\r\n    todoId: string,\r\n    taskId: string,\r\n    entityStatus: RequestStatusType\r\n) => ({ type: \"CHANGE-ENTITYSTATUS-TASK\", todoId, taskId, entityStatus } as const)\r\n//\r\n//\r\nexport const setTasksThunk = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    todolistsAPI.getTasks(todolistId).then((resp) => {\r\n        dispatch(setTasks(resp.data.items, todolistId))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n    })\r\n}\r\nexport const deleteTasksThunk = (todolistId: string, taskID: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTaskEntityStatus(todolistId, taskID, \"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskID).then(() => {\r\n        dispatch(removeTask(taskID, todolistId))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n        dispatch(changeTaskEntityStatus(todolistId, taskID, \"succeeded\"))\r\n    })\r\n}\r\nexport const addTaskThunk = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(todolistId, \"loading\"))\r\n    todolistsAPI\r\n        .createTask(todolistId, taskTitile)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTask(res.data.data.item, todolistId))  \r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"))\r\n        })\r\n}\r\nexport const changeTaskStatusThunk = (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodo = allTasksFromState[todolistId]\r\n        const currentTask = tasksForCurrentTodo.find((t) => t.id === taskId)\r\n        if (currentTask) {\r\n            dispatch(changeLoadingStatus(\"loading\"))\r\n            dispatch(changeTaskEntityStatus(todolistId, taskId, \"loading\"))\r\n            todolistsAPI\r\n                .updateTask(todolistId, taskId, {\r\n                    title: currentTask.title,\r\n                    startDate: currentTask.startDate,\r\n                    priority: currentTask.priority,\r\n                    description: currentTask.description,\r\n                    deadline: currentTask.deadline,\r\n                    status: status,\r\n                })\r\n                .then(() => {\r\n                    dispatch(changeTaskStatus(taskId, status, todolistId))\r\n                    dispatch(changeLoadingStatus(\"succeeded\"))\r\n                    dispatch(changeTaskEntityStatus(todolistId, taskId, \"succeeded\"))\r\n                })\r\n        }\r\n    }\r\n}\r\nexport const changeTaskTitleThunk = (todolistId: string, taskId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodo = allTasksFromState[todolistId]\r\n        const currentTask = tasksForCurrentTodo.find((t) => t.id === taskId)\r\n        if (currentTask) {\r\n            dispatch(changeLoadingStatus(\"loading\"))\r\n            dispatch(changeTaskEntityStatus(todolistId, taskId, \"loading\"))\r\n            todolistsAPI\r\n                .updateTask(todolistId, taskId, {\r\n                    title: title,\r\n                    startDate: currentTask.startDate,\r\n                    priority: currentTask.priority,\r\n                    description: currentTask.description,\r\n                    deadline: currentTask.deadline,\r\n                    status: currentTask.status,\r\n                })\r\n                .then((resp) => {\r\n                    if (resp.data.resultCode === 0) {\r\n                        dispatch(changeTaskTitle(taskId, title, todolistId))\r\n                    } else {\r\n                        handleServerAppError(resp.data, dispatch)\r\n                    }\r\n                    dispatch(changeLoadingStatus(\"succeeded\"))\r\n                    dispatch(changeTaskEntityStatus(todolistId, taskId, \"succeeded\"))\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                    dispatch(changeLoadingStatus(\"succeeded\"))\r\n                    dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"))\r\n                })\r\n        }\r\n    }\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\Todolist.tsx",["89","90","91","92","93"],"import React, { useCallback, useEffect } from \"react\"\r\nimport { AddItemForm } from \"./AddItemForm\"\r\nimport { EditableSpan } from \"./EditableSpan\"\r\nimport { Button, IconButton } from \"@material-ui/core\"\r\nimport { Delete } from \"@material-ui/icons\"\r\nimport { Task } from \"./Task\"\r\nimport { TaskStatuses } from \"./api/todolists-api\"\r\nimport { changeTitleTodoThunk, changeTodolistFilter, deleteTodoThunk, FilterValuesType, TodolistDomainType } from \"./state/todolists-reducer\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { addTaskThunk, setTasksThunk, TasksStateType } from \"./state/tasks-reducer\"\r\nimport { AppRootStateType } from \"./state/store\"\r\nimport { RequestStatusType } from \"./state/app-reducer\"\r\n\r\ntype PropsType = {\r\n    id: string\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>((state) => state.todolists)\r\n    const allTasksFromState = useSelector<AppRootStateType, TasksStateType>((state) => state.tasks)\r\n    let tasks = allTasksFromState[props.id]\r\n    let title = \"\"\r\n    let filter = \"\"\r\n    todolists.forEach((tl) => {\r\n        if (tl.id === props.id) {\r\n            title = tl.title\r\n            filter = tl.filter\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        dispatch(setTasksThunk(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback(\r\n        (title: string) => {\r\n            dispatch(addTaskThunk(props.id, title))\r\n        },\r\n        [props.id]\r\n    )\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(deleteTodoThunk(props.id))\r\n    }, [])\r\n    const changeTodolistTitle = useCallback(\r\n        (title: string) => {\r\n            dispatch(changeTitleTodoThunk(props.id, title))\r\n        },\r\n        [props.id]\r\n    )\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilter(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", props.id), [props.id, changeFilter])\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", props.id), [props.id, changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", props.id), [props.id, changeFilter])\r\n\r\n    if (filter === \"active\") {\r\n        tasks = tasks.filter((t) => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasks = tasks.filter((t) => t.status === TaskStatuses.Completed)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={title} onChange={changeTodolistTitle} entityStatusForTodo={props.entityStatus}/>\r\n                <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatus} />\r\n            <div>\r\n                {tasks.map((t) => (\r\n                    <Task key={t.id} task={t} todolistId={props.id} entityStatusForTask={t.entityStatus} />\r\n                ))}\r\n            </div>\r\n            <div style={{ paddingTop: \"10px\" }}>\r\n                <Button variant={filter === \"all\" ? \"outlined\" : \"text\"} onClick={onAllClickHandler} color={\"default\"}>\r\n                    All\r\n                </Button>\r\n                <Button variant={filter === \"active\" ? \"outlined\" : \"text\"} onClick={onActiveClickHandler} color={\"primary\"}>\r\n                    Active\r\n                </Button>\r\n                <Button variant={filter === \"completed\" ? \"outlined\" : \"text\"} onClick={onCompletedClickHandler} color={\"secondary\"}>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\AddItemForm.tsx",["94","95","96"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled: \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled === \"loading\"}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled === \"loading\"}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\api\\todolists-api.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\Task.tsx",["97","98","99","100","101"],"import React, { ChangeEvent, useCallback } from \"react\"\r\nimport { Checkbox, IconButton } from \"@material-ui/core\"\r\nimport { EditableSpan } from \"./EditableSpan\"\r\nimport { Delete } from \"@material-ui/icons\"\r\nimport { TaskStatuses, TaskType } from \"./api/todolists-api\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport {\r\n    changeTaskStatusThunk,\r\n    changeTaskTitleThunk,\r\n    deleteTasksThunk,\r\n} from \"./state/tasks-reducer\"\r\nimport { RequestStatusType } from \"./state/app-reducer\"\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    entityStatusForTask: RequestStatusType\r\n    entityStatusForTodo?: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(changeTaskStatusThunk(todolistId, id, status))\r\n    }, [])\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleThunk(todolistId, id, newTitle))\r\n    }, [])\r\n    const onClickHandler = useCallback(\r\n        () => dispatch(deleteTasksThunk(props.todolistId, props.task.id)),\r\n        [props.todolistId, props.task.id]\r\n    )\r\n\r\n    const onChangeHandler = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked\r\n            changeStatus(\r\n                props.task.id,\r\n                newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n                props.todolistId\r\n            )\r\n        },\r\n        [props.task.id, props.todolistId]\r\n    )\r\n\r\n    const onTitleChangeHandler = useCallback(\r\n        (newValue: string) => {\r\n            changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n        },\r\n        [props.task.id, props.todolistId]\r\n    )\r\n\r\n    return (\r\n        <div\r\n            key={props.task.id}\r\n            className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n        >\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n                disabled={props.entityStatusForTask === \"loading\"}\r\n            />\r\n            <EditableSpan\r\n                value={props.task.title}\r\n                onChange={onTitleChangeHandler}\r\n                entityStatusForTask={props.entityStatusForTask}\r\n            />\r\n            <IconButton onClick={onClickHandler} disabled={props.entityStatusForTask === \"loading\"}>\r\n                <Delete />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\EditableSpan.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\state\\app-reducer.ts",["102"],"import { Dispatch } from \"redux\"\r\nimport { LoginingDataType, todolistsAPI } from \"../api/todolists-api\"\r\nimport { handleServerNetworkError } from \"../utils/error-utils\"\r\nimport { setTodoThunk } from \"./todolists-reducer\"\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\nexport type appReducerStateType = typeof initialState\r\nexport type AppActionType =\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ResetErrorType\r\n    | SetUserDataType\r\n    | IsLoginingChangeType\r\n    | OnInitializedType\r\nexport type ChangeLoadingStatusType = ReturnType<typeof changeLoadingStatus>\r\nexport type SetAppErrorType = ReturnType<typeof setAppError>\r\nexport type ResetErrorType = ReturnType<typeof resetError>\r\nexport type SetUserDataType = ReturnType<typeof setUserData>\r\nexport type IsLoginingChangeType = ReturnType<typeof isLoginingChange>\r\nexport type OnInitializedType = ReturnType<typeof onInitalized>\r\n\r\nconst initialState = {\r\n    status: \"loading\" as RequestStatusType,\r\n    error: null as string | null,\r\n    isLogining: false,\r\n    isInitialized: false,\r\n    auth: {\r\n        userId: 0,\r\n        email: \"\",\r\n        login: \"\",\r\n    },\r\n}\r\n\r\nexport const appReducer = (\r\n    state: appReducerStateType = initialState,\r\n    action: AppActionType\r\n): appReducerStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\":\r\n            return { ...state, status: action.status }\r\n        case \"APP/SET-ERROR\":\r\n            return { ...state, error: action.error }\r\n        case \"APP/RESET-ERROR\":\r\n            return { ...state, error: null }\r\n        case \"APP/LOGINING\":\r\n            state.auth = action.userData\r\n            return { ...state }\r\n        case \"APP/IS-LOGINING\":\r\n            return { ...state, isLogining: action.logVal }\r\n        case \"APP/INITIALIZED\":\r\n            return { ...state, isInitialized: action.initVal }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const changeLoadingStatus = (status: RequestStatusType) =>\r\n    ({ type: \"APP/SET-STATUS\", status } as const)\r\nexport const setAppError = (error: string) => ({ type: \"APP/SET-ERROR\", error } as const)\r\nexport const resetError = () => ({ type: \"APP/RESET-ERROR\" } as const)\r\nexport const setUserData = (userData: { userId: number; email: string; login: string }) =>\r\n    ({ type: \"APP/LOGINING\", userData } as const)\r\nexport const isLoginingChange = (logVal: boolean) => ({ type: \"APP/IS-LOGINING\", logVal } as const)\r\nexport const onInitalized = (initVal: boolean) => ({ type: \"APP/INITIALIZED\", initVal } as const)\r\n\r\nexport const logining = (loginingData: LoginingDataType) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(changeLoadingStatus(\"loading\"))\r\n        try {\r\n            const userId = await (await todolistsAPI.loginIn(loginingData)).data.data.userId\r\n            dispatch(setUserData({ userId, email: \"\", login: \"\" }))\r\n            dispatch(isLoginingChange(true))\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        }\r\n    }\r\n}\r\nexport const authMe = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(changeLoadingStatus(\"loading\"))\r\n        try {\r\n            const response = await (await todolistsAPI.authMe()).data\r\n            if (response.resultCode === 0) {\r\n                dispatch(setUserData(response.data))\r\n                dispatch(isLoginingChange(true))\r\n            } else {\r\n                dispatch(isLoginingChange(false))\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        }\r\n    }\r\n}\r\nexport const logout = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(changeLoadingStatus(\"loading\"))\r\n        try {\r\n            const response = await (await todolistsAPI.logout()).data\r\n            if (response.resultCode === 0) {\r\n                dispatch(setUserData({ email: \"\", login: \"\", userId: 0 }))\r\n                dispatch(isLoginingChange(false))\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        }\r\n    }\r\n}\r\n\r\nexport const initialized = () => {\r\n    return async (dispatch: any) => {\r\n        dispatch(changeLoadingStatus(\"loading\"))\r\n        try {\r\n            await dispatch(authMe())\r\n            dispatch(onInitalized(true))\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        }\r\n    }\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\ErrorSnackbar.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\error-utils.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolist\\TodoListsContainer.tsx",["103"],"import Grid from \"@material-ui/core/Grid/Grid\"\r\nimport Paper from \"@material-ui/core/Paper/Paper\"\r\nimport React, { useCallback, useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { AddItemForm } from \"../../../AddItemForm\"\r\nimport { getAppState, getTodoState } from \"../../../selectors\"\r\nimport { addTodoThunk, setTodoThunk } from \"../../../state/todolists-reducer\"\r\nimport { Todolist } from \"../../../Todolist\"\r\n\r\nconst TodoListsContainer: React.FunctionComponent = () => {\r\n    const [...todolists] = useSelector(getTodoState)\r\n    const { isLogining } = useSelector(getAppState)\r\n\r\n    useEffect(() => {\r\n        if (!isLogining) return\r\n        dispatch(setTodoThunk())\r\n    }, [])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodolist = useCallback(\r\n        (title: string) => {\r\n            dispatch(addTodoThunk(title))\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    if (!isLogining) return <Redirect to={\"/logining\"} />\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{ padding: \"20px\" }}>\r\n                <AddItemForm addItem={addTodolist} disabled={\"idle\"} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map((tl) => {\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper style={{ padding: \"10px\" }} elevation={3}>\r\n                                <Todolist id={tl.id} entityStatus={tl.entityStatus} />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoListsContainer\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx",["104"],"import React from \"react\"\r\nimport {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    TextField,\r\n    Button,\r\n    Grid,\r\n} from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport Paper from \"@material-ui/core/Paper/Paper\"\r\nimport { LoginingDataType } from \"../../../api/todolists-api\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\ntype LoginingPropsType = {\r\n    loginIn: (loginingData: LoginingDataType) => void\r\n    isLoginig: boolean\r\n}\r\n\r\ntype FormErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport const Logining: React.FunctionComponent<LoginingPropsType> = (props) => {\r\n    const { loginIn, isLoginig } = props\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = \"This field required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"This field required\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            loginIn(values)\r\n        },\r\n    })\r\n    if (isLoginig) return <Redirect to={\"/\"} />\r\n    return (\r\n        <Grid container direction={\"column\"} justify={\"center\"} alignItems={\"center\"}>\r\n            <Grid item xs={4} style={{ marginTop: \"100px\" }}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Paper style={{ padding: \"10px\" }} elevation={3}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <p>\r\n                                    To log in get registered\r\n                                    <a\r\n                                        href={\"https://social-network.samuraijs.com/\"}\r\n                                        target={\"_blank\"}\r\n                                    >\r\n                                        here\r\n                                    </a>\r\n                                </p>\r\n                                <p>or use common test account credentials:</p>\r\n                                <p>Email: free@samuraijs.com</p>\r\n                                <p>Password: free</p>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    name={\"email\"}\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.email && formik.errors.email ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    name={\"password\"}\r\n                                    value={formik.values.password}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.password && formik.errors.password ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <FormControlLabel\r\n                                    label={\"Remember me\"}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            name={\"rememberMe\"}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    }\r\n                                />\r\n                                <Button\r\n                                    type={\"submit\"}\r\n                                    variant={\"contained\"}\r\n                                    color={\"primary\"}\r\n                                    onClick={formik.submitForm}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </Paper>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\selectors.ts",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":21,"column":8,"nodeType":"111","endLine":21,"endColumn":10,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":9,"column":5,"nodeType":"115","messageId":"116","endLine":9,"endColumn":16},{"ruleId":"113","severity":1,"message":"114","line":16,"column":5,"nodeType":"115","messageId":"116","endLine":16,"endColumn":16},{"ruleId":"109","severity":1,"message":"117","line":34,"column":8,"nodeType":"111","endLine":34,"endColumn":10,"suggestions":"118"},{"ruleId":"109","severity":1,"message":"119","line":40,"column":9,"nodeType":"111","endLine":40,"endColumn":19,"suggestions":"120"},{"ruleId":"109","severity":1,"message":"121","line":45,"column":8,"nodeType":"111","endLine":45,"endColumn":10,"suggestions":"122"},{"ruleId":"109","severity":1,"message":"119","line":50,"column":9,"nodeType":"111","endLine":50,"endColumn":19,"suggestions":"123"},{"ruleId":"109","severity":1,"message":"119","line":56,"column":8,"nodeType":"111","endLine":56,"endColumn":10,"suggestions":"124"},{"ruleId":"113","severity":1,"message":"125","line":2,"column":9,"nodeType":"115","messageId":"116","endLine":2,"endColumn":12},{"ruleId":"113","severity":1,"message":"126","line":2,"column":14,"nodeType":"115","messageId":"116","endLine":2,"endColumn":20},{"ruleId":"113","severity":1,"message":"127","line":2,"column":22,"nodeType":"115","messageId":"116","endLine":2,"endColumn":33},{"ruleId":"109","severity":1,"message":"119","line":24,"column":8,"nodeType":"111","endLine":24,"endColumn":10,"suggestions":"128"},{"ruleId":"109","severity":1,"message":"119","line":27,"column":8,"nodeType":"111","endLine":27,"endColumn":10,"suggestions":"129"},{"ruleId":"109","severity":1,"message":"119","line":30,"column":9,"nodeType":"111","endLine":30,"endColumn":42,"suggestions":"130"},{"ruleId":"109","severity":1,"message":"131","line":42,"column":9,"nodeType":"111","endLine":42,"endColumn":42,"suggestions":"132"},{"ruleId":"109","severity":1,"message":"133","line":49,"column":9,"nodeType":"111","endLine":49,"endColumn":42,"suggestions":"134"},{"ruleId":"113","severity":1,"message":"135","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":22},{"ruleId":"109","severity":1,"message":"136","line":18,"column":8,"nodeType":"111","endLine":18,"endColumn":10,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":61,"column":37,"nodeType":"140","endLine":64,"endColumn":38},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["143"],"@typescript-eslint/no-unused-vars","'setAppError' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["144"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["145"],"React Hook useCallback has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["146"],["147"],["148"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.",["149"],["150"],["151"],"React Hook useCallback has a missing dependency: 'changeStatus'. Either include it or remove the dependency array.",["152"],"React Hook useCallback has a missing dependency: 'changeTaskTitle'. Either include it or remove the dependency array.",["153"],"'setTodoThunk' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'isLogining'. Either include them or remove the dependency array.",["154"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"157","fix":"159"},{"desc":"157","fix":"160"},{"desc":"157","fix":"161"},{"desc":"155","fix":"162"},{"desc":"155","fix":"163"},{"desc":"155","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [dispatch]",{"range":"173","text":"174"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"175","text":"176"},{"range":"177","text":"176"},{"range":"178","text":"176"},{"range":"179","text":"176"},{"range":"180","text":"174"},{"range":"181","text":"174"},{"range":"182","text":"174"},"Update the dependencies array to be: [dispatch, props.todolistId, props.task.id]",{"range":"183","text":"184"},"Update the dependencies array to be: [changeStatus, props.task.id, props.todolistId]",{"range":"185","text":"186"},"Update the dependencies array to be: [changeTaskTitle, props.task.id, props.todolistId]",{"range":"187","text":"188"},"Update the dependencies array to be: [dispatch, isLogining]",{"range":"189","text":"190"},[1027,1029],"[dispatch]",[1421,1423],"[dispatch, props.id]",[1565,1575],[1686,1688],[1848,1858],[2055,2057],[917,919],[1092,1094],[1222,1255],"[dispatch, props.todolistId, props.task.id]",[1620,1653],"[changeStatus, props.task.id, props.todolistId]",[1836,1869],"[changeTaskTitle, props.task.id, props.todolistId]",[765,767],"[dispatch, isLogining]"]