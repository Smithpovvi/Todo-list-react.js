[{"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx":"1","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts":"2","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx":"3","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx":"4","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\store.ts":"5","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\App.tsx":"6","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\app-reducer.ts":"7","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\tasks-reducer.ts":"8","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\todolists-reducer.ts":"9","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\selectors\\selectors.ts":"10","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\errorSnackBar\\ErrorSnackbar.tsx":"11","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\addItemForm\\AddItemForm.tsx":"12","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\server-api\\todolists-api.ts":"13","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\Task.tsx":"14","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\editableSpan\\EditableSpan.tsx":"15","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\error-utils.ts":"16","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\InterfaceApp\\InterfaceApp.tsx":"17","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPageContainer.tsx":"18","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPage.tsx":"19","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\TodolistContainer.tsx":"20","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\Todolist.tsx":"21"},{"size":571,"mtime":1627253022458,"results":"22","hashOfConfig":"23"},{"size":440,"mtime":1627251859784,"results":"24","hashOfConfig":"23"},{"size":697,"mtime":1627332472553,"results":"25","hashOfConfig":"23"},{"size":5235,"mtime":1627332751921,"results":"26","hashOfConfig":"23"},{"size":1061,"mtime":1627253022639,"results":"27","hashOfConfig":"23"},{"size":814,"mtime":1627334285215,"results":"28","hashOfConfig":"23"},{"size":4718,"mtime":1627253022643,"results":"29","hashOfConfig":"23"},{"size":10001,"mtime":1627336769303,"results":"30","hashOfConfig":"23"},{"size":6025,"mtime":1627253022640,"results":"31","hashOfConfig":"23"},{"size":265,"mtime":1627339376540,"results":"32","hashOfConfig":"23"},{"size":1034,"mtime":1627253022625,"results":"33","hashOfConfig":"23"},{"size":1633,"mtime":1627253022631,"results":"34","hashOfConfig":"23"},{"size":3176,"mtime":1627253022636,"results":"35","hashOfConfig":"23"},{"size":2749,"mtime":1627253022623,"results":"36","hashOfConfig":"23"},{"size":1430,"mtime":1627253022629,"results":"37","hashOfConfig":"23"},{"size":849,"mtime":1627253022627,"results":"38","hashOfConfig":"23"},{"size":2502,"mtime":1627340192454,"results":"39","hashOfConfig":"23"},{"size":953,"mtime":1627340159413,"results":"40","hashOfConfig":"23"},{"size":1651,"mtime":1627340147258,"results":"41","hashOfConfig":"23"},{"size":2088,"mtime":1627340133378,"results":"42","hashOfConfig":"23"},{"size":3684,"mtime":1627340346627,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1m9ez5e",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx",[],["92","93"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx",["94"],"import React from \"react\"\r\nimport {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    TextField,\r\n    Button,\r\n    Grid,\r\n} from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport Paper from \"@material-ui/core/Paper/Paper\"\r\nimport { LoginingDataType } from \"../../../main/server-api/todolists-api\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\ntype LoginingPropsType = {\r\n    loginIn: (loginingData: LoginingDataType) => void\r\n    isLoginig: boolean\r\n}\r\n\r\ntype FormErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport const Logining: React.FunctionComponent<LoginingPropsType> = (props) => {\r\n    const { loginIn, isLoginig } = props\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = \"This field required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"This field required\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            loginIn(values)\r\n        },\r\n    })\r\n\r\n    if (isLoginig) return <Redirect to={\"/\"} />\r\n\r\n    return (\r\n        <Grid container direction={\"column\"} justify={\"center\"} alignItems={\"center\"}>\r\n            <Grid item xs={4} style={{ marginTop: \"100px\" }}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Paper style={{ padding: \"10px\" }} elevation={3}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <p>\r\n                                    To log in get registered\r\n                                    <a\r\n                                        href={\"https://social-network.samuraijs.com/\"}\r\n                                        target={\"_blank\"}\r\n                                    >\r\n                                        here\r\n                                    </a>\r\n                                </p>\r\n                                <p>or use common test account credentials:</p>\r\n                                <p>Email: free@samuraijs.com</p>\r\n                                <p>Password: free</p>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    name={\"email\"}\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.email && formik.errors.email ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    name={\"password\"}\r\n                                    value={formik.values.password}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.password && formik.errors.password ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <FormControlLabel\r\n                                    label={\"Remember me\"}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            name={\"rememberMe\"}\r\n                                            value={formik.values.rememberMe}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    }\r\n                                />\r\n                                <Button\r\n                                    type={\"submit\"}\r\n                                    variant={\"contained\"}\r\n                                    color={\"primary\"}\r\n                                    onClick={formik.submitForm}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </Paper>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\store.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\App.tsx",["95"],"import React, { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { initialized, logout } from \"../../bll/reducers/app-reducer\"\r\nimport { getAppState } from \"../../../utils/selectors/selectors\"\r\nimport InterfaceApp from \"./InterfaceApp/InterfaceApp\"\r\n\r\nconst App: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initialized())\r\n    }, [])\r\n\r\n    const { status, isInitialized, isLogining } = useSelector(getAppState)\r\n\r\n    const logoutMe = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <InterfaceApp\r\n            isInitialized={isInitialized}\r\n            isLogining={isLogining}\r\n            logoutMe={logoutMe}\r\n            status={status}\r\n        />\r\n    )\r\n}\r\n\r\nexport default App\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\app-reducer.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\tasks-reducer.ts",["96"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\todolists-reducer.ts",["97"],"import { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { todolistsAPI, TodolistType } from \"../../server-api/todolists-api\"\r\nimport {\r\n    handleServerAppError,\r\n    handleServerNetworkError,\r\n} from \"../../../utils/features/errors/error-utils\"\r\nimport {\r\n    changeLoadingStatus,\r\n    ChangeLoadingStatusType,\r\n    RequestStatusType,\r\n    setAppError,\r\n    SetAppErrorType,\r\n} from \"./app-reducer\"\r\nimport { AppRootStateType } from \"../store\"\r\n\r\n\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolist>\r\nexport type AddTodolistType = ReturnType<typeof addTodolist>\r\nexport type ChangeTodolistTitleType = ReturnType<typeof changeTodolistTitle>\r\nexport type ChangeTodolistFilterType = ReturnType<typeof changeTodolistFilter>\r\nexport type SetTodolistType = ReturnType<typeof setTodolist>\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatus>\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TodolistThunkCreatorType = ThunkAction<\r\n    Promise<void>,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType\r\n>\r\ntype ActionsType =\r\n    | RemoveTodolistType\r\n    | AddTodolistType\r\n    | ChangeTodolistTitleType\r\n    | ChangeTodolistFilterType\r\n    | SetTodolistType\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\n//\r\n//\r\nconst initialState: Array<TodolistDomainType> = []\r\n//\r\n//\r\nexport const todolistsReducer = (\r\n    state = initialState,\r\n    action: ActionsType\r\n): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter((tl) => tl.id !== action.id)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const filter: FilterValuesType = \"all\"\r\n            const entityStatus: RequestStatusType = \"idle\"\r\n            const newTodo = { ...action.todolist, filter: filter, entityStatus: entityStatus }\r\n            return [...state, newTodo]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            const todolist = state.find((tl) => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const todolist = state.find((tl) => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"SET-TODO\":\r\n            return action.todos.map((tl) => ({ ...tl, filter: \"all\", entityStatus: \"idle\" }))\r\n        case \"CHANGE-ENTITYSTATUS\":\r\n            const todolist = state.find((tl) => tl.id === action.todoId)\r\n            if (todolist) {\r\n                todolist.entityStatus = action.entityStatus\r\n            }\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//\r\n//\r\nexport const removeTodolist = (todolistId: string) => {\r\n    return { type: \"REMOVE-TODOLIST\", id: todolistId } as const\r\n}\r\nexport const addTodolist = (todolist: TodolistType) => {\r\n    return { type: \"ADD-TODOLIST\", todolist } as const\r\n}\r\nexport const changeTodolistTitle = (id: string, title: string) => {\r\n    return { type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title } as const\r\n}\r\nexport const changeTodolistFilter = (id: string, filter: FilterValuesType) => {\r\n    return { type: \"CHANGE-TODOLIST-FILTER\", id: id, filter: filter } as const\r\n}\r\nexport const setTodolist = (todos: Array<TodolistType>) => ({ type: \"SET-TODO\", todos } as const)\r\nexport const changeTodolistEntityStatus = (todoId: string, entityStatus: RequestStatusType) =>\r\n    ({ type: \"CHANGE-ENTITYSTATUS\", todoId, entityStatus } as const)\r\n//\r\n//\r\nexport const setTodoThunk = () => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    todolistsAPI.getTodolists().then((resp) => {\r\n        dispatch(setTodolist(resp.data))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n    })\r\n}\r\nexport const addTodoThunk = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    todolistsAPI\r\n        .createTodolist(title)\r\n        .then((resp) => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(addTodolist(resp.data.data.item))\r\n            } else {\r\n                handleServerAppError(resp.data, dispatch)\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        })\r\n}\r\nexport const deleteTodoThunk = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(id, \"loading\"))\r\n    todolistsAPI.deleteTodolist(id).then(() => {\r\n        dispatch(removeTodolist(id))\r\n        dispatch(changeTodolistEntityStatus(id, \"idle\"))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n    })\r\n}\r\nexport const changeTitleTodoThunk = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(id, \"loading\"))\r\n    todolistsAPI\r\n        .updateTodolist(id, title)\r\n        .then((resp) => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitle(id, title))\r\n                dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n            } else {\r\n                handleServerAppError(resp.data, dispatch)\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n        })\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\selectors\\selectors.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\errorSnackBar\\ErrorSnackbar.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\addItemForm\\AddItemForm.tsx",["98","99","100"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled: \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled === \"loading\"}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled === \"loading\"}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\server-api\\todolists-api.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\Task.tsx",["101","102","103","104","105"],"import React, { ChangeEvent, useCallback } from \"react\"\r\nimport { Checkbox, IconButton } from \"@material-ui/core\"\r\nimport { EditableSpan } from \"../editableSpan/EditableSpan\"\r\nimport { Delete } from \"@material-ui/icons\"\r\nimport { TaskStatuses, TaskType } from \"../../../main/server-api/todolists-api\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport {\r\n    changeTaskStatusThunk,\r\n    changeTaskTitleThunk,\r\n    deleteTasksThunk,\r\n} from \"../../../main/bll/reducers/tasks-reducer\"\r\nimport { RequestStatusType } from \"../../../main/bll/reducers/app-reducer\"\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    entityStatusForTask: RequestStatusType\r\n    entityStatusForTodo?: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(changeTaskStatusThunk(todolistId, id, status))\r\n    }, [])\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleThunk(todolistId, id, newTitle))\r\n    }, [])\r\n    const onClickHandler = useCallback(\r\n        () => dispatch(deleteTasksThunk(props.todolistId, props.task.id)),\r\n        [props.todolistId, props.task.id]\r\n    )\r\n\r\n    const onChangeHandler = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked\r\n            changeStatus(\r\n                props.task.id,\r\n                newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n                props.todolistId\r\n            )\r\n        },\r\n        [props.task.id, props.todolistId]\r\n    )\r\n\r\n    const onTitleChangeHandler = useCallback(\r\n        (newValue: string) => {\r\n            changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n        },\r\n        [props.task.id, props.todolistId]\r\n    )\r\n\r\n    return (\r\n        <div\r\n            key={props.task.id}\r\n            className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n        >\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n                disabled={props.entityStatusForTask === \"loading\"}\r\n            />\r\n            <EditableSpan\r\n                value={props.task.title}\r\n                onChange={onTitleChangeHandler}\r\n                entityStatusForTask={props.entityStatusForTask}\r\n            />\r\n            <IconButton onClick={onClickHandler} disabled={props.entityStatusForTask === \"loading\"}>\r\n                <Delete />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\editableSpan\\EditableSpan.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\error-utils.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\InterfaceApp\\InterfaceApp.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPageContainer.tsx",["106"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPage.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\TodolistContainer.tsx",["107","108","109","110","111"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\Todolist.tsx",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":64,"column":37,"nodeType":"118","endLine":67,"endColumn":38},{"ruleId":"119","severity":1,"message":"120","line":12,"column":8,"nodeType":"121","endLine":12,"endColumn":10,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":16,"column":5,"nodeType":"125","messageId":"126","endLine":16,"endColumn":16},{"ruleId":"123","severity":1,"message":"124","line":12,"column":5,"nodeType":"125","messageId":"126","endLine":12,"endColumn":16},{"ruleId":"123","severity":1,"message":"127","line":2,"column":9,"nodeType":"125","messageId":"126","endLine":2,"endColumn":12},{"ruleId":"123","severity":1,"message":"128","line":2,"column":14,"nodeType":"125","messageId":"126","endLine":2,"endColumn":20},{"ruleId":"123","severity":1,"message":"129","line":2,"column":22,"nodeType":"125","messageId":"126","endLine":2,"endColumn":33},{"ruleId":"119","severity":1,"message":"130","line":24,"column":8,"nodeType":"121","endLine":24,"endColumn":10,"suggestions":"131"},{"ruleId":"119","severity":1,"message":"130","line":27,"column":8,"nodeType":"121","endLine":27,"endColumn":10,"suggestions":"132"},{"ruleId":"119","severity":1,"message":"130","line":30,"column":9,"nodeType":"121","endLine":30,"endColumn":42,"suggestions":"133"},{"ruleId":"119","severity":1,"message":"134","line":42,"column":9,"nodeType":"121","endLine":42,"endColumn":42,"suggestions":"135"},{"ruleId":"119","severity":1,"message":"136","line":49,"column":9,"nodeType":"121","endLine":49,"endColumn":42,"suggestions":"137"},{"ruleId":"119","severity":1,"message":"138","line":14,"column":8,"nodeType":"121","endLine":14,"endColumn":10,"suggestions":"139"},{"ruleId":"119","severity":1,"message":"140","line":31,"column":8,"nodeType":"121","endLine":31,"endColumn":10,"suggestions":"141"},{"ruleId":"119","severity":1,"message":"130","line":41,"column":9,"nodeType":"121","endLine":41,"endColumn":13,"suggestions":"142"},{"ruleId":"119","severity":1,"message":"143","line":46,"column":8,"nodeType":"121","endLine":46,"endColumn":10,"suggestions":"144"},{"ruleId":"119","severity":1,"message":"130","line":52,"column":9,"nodeType":"121","endLine":52,"endColumn":13,"suggestions":"145"},{"ruleId":"119","severity":1,"message":"130","line":58,"column":8,"nodeType":"121","endLine":58,"endColumn":10,"suggestions":"146"},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["149"],"@typescript-eslint/no-unused-vars","'setAppError' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["150"],["151"],["152"],"React Hook useCallback has a missing dependency: 'changeStatus'. Either include it or remove the dependency array.",["153"],"React Hook useCallback has a missing dependency: 'changeTaskTitle'. Either include it or remove the dependency array.",["154"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isLogining'. Either include them or remove the dependency array.",["155"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["156"],["157"],"React Hook useCallback has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["158"],["159"],["160"],"no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"161","fix":"163"},{"desc":"161","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"173","fix":"175"},{"desc":"176","fix":"177"},{"desc":"173","fix":"178"},{"desc":"161","fix":"179"},"Update the dependencies array to be: [dispatch]",{"range":"180","text":"181"},{"range":"182","text":"181"},{"range":"183","text":"181"},"Update the dependencies array to be: [dispatch, props.todolistId, props.task.id]",{"range":"184","text":"185"},"Update the dependencies array to be: [changeStatus, props.task.id, props.todolistId]",{"range":"186","text":"187"},"Update the dependencies array to be: [changeTaskTitle, props.task.id, props.todolistId]",{"range":"188","text":"189"},"Update the dependencies array to be: [dispatch, isLogining]",{"range":"190","text":"191"},"Update the dependencies array to be: [dispatch, id]",{"range":"192","text":"193"},{"range":"194","text":"193"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"195","text":"196"},{"range":"197","text":"193"},{"range":"198","text":"181"},[439,441],"[dispatch]",[988,990],[1163,1165],[1293,1326],"[dispatch, props.todolistId, props.task.id]",[1691,1724],"[changeStatus, props.task.id, props.todolistId]",[1907,1940],"[changeTaskTitle, props.task.id, props.todolistId]",[543,545],"[dispatch, isLogining]",[958,960],"[dispatch, id]",[1198,1202],[1313,1315],"[dispatch, props.id]",[1471,1475],[1672,1674]]