[{"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx":"1","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts":"2","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx":"3","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx":"4","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\store.ts":"5","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\App.tsx":"6","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\app-reducer.ts":"7","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\tasks-reducer.ts":"8","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\todolists-reducer.ts":"9","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\selectors\\selectors.ts":"10","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\errorSnackBar\\ErrorSnackbar.tsx":"11","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\addItemForm\\AddItemForm.tsx":"12","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\server-api\\todolists-api.ts":"13","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\Task.tsx":"14","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\editableSpan\\EditableSpan.tsx":"15","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\error-utils.ts":"16","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\InterfaceApp\\InterfaceApp.tsx":"17","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPageContainer.tsx":"18","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPage.tsx":"19","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\TodolistContainer.tsx":"20","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\Todolist.tsx":"21","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\TaskContainer.tsx":"22"},{"size":571,"mtime":1627253022458,"results":"23","hashOfConfig":"24"},{"size":440,"mtime":1627251859784,"results":"25","hashOfConfig":"24"},{"size":697,"mtime":1627332472553,"results":"26","hashOfConfig":"24"},{"size":5235,"mtime":1627340513654,"results":"27","hashOfConfig":"24"},{"size":1061,"mtime":1627253022639,"results":"28","hashOfConfig":"24"},{"size":814,"mtime":1627340513631,"results":"29","hashOfConfig":"24"},{"size":4718,"mtime":1627253022643,"results":"30","hashOfConfig":"24"},{"size":10001,"mtime":1627340513623,"results":"31","hashOfConfig":"24"},{"size":6025,"mtime":1627253022640,"results":"32","hashOfConfig":"24"},{"size":265,"mtime":1627340513692,"results":"33","hashOfConfig":"24"},{"size":1034,"mtime":1627253022625,"results":"34","hashOfConfig":"24"},{"size":1633,"mtime":1627253022631,"results":"35","hashOfConfig":"24"},{"size":3176,"mtime":1627253022636,"results":"36","hashOfConfig":"24"},{"size":1561,"mtime":1627762668074,"results":"37","hashOfConfig":"24"},{"size":1430,"mtime":1627253022629,"results":"38","hashOfConfig":"24"},{"size":849,"mtime":1627253022627,"results":"39","hashOfConfig":"24"},{"size":2502,"mtime":1627340513646,"results":"40","hashOfConfig":"24"},{"size":953,"mtime":1627340513667,"results":"41","hashOfConfig":"24"},{"size":1651,"mtime":1627340513664,"results":"42","hashOfConfig":"24"},{"size":2090,"mtime":1627761973706,"results":"43","hashOfConfig":"24"},{"size":3707,"mtime":1627762637939,"results":"44","hashOfConfig":"24"},{"size":2166,"mtime":1627762497584,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1m9ez5e",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\index.tsx",[],["97","98"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\reportWebVitals.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\LoginingContainer.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\logining\\Logining.tsx",["99"],"import React from \"react\"\r\nimport {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    TextField,\r\n    Button,\r\n    Grid,\r\n} from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport Paper from \"@material-ui/core/Paper/Paper\"\r\nimport { LoginingDataType } from \"../../../main/server-api/todolists-api\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\ntype LoginingPropsType = {\r\n    loginIn: (loginingData: LoginingDataType) => void\r\n    isLoginig: boolean\r\n}\r\n\r\ntype FormErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport const Logining: React.FunctionComponent<LoginingPropsType> = (props) => {\r\n    const { loginIn, isLoginig } = props\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = \"This field required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"This field required\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            loginIn(values)\r\n        },\r\n    })\r\n\r\n    if (isLoginig) return <Redirect to={\"/\"} />\r\n\r\n    return (\r\n        <Grid container direction={\"column\"} justify={\"center\"} alignItems={\"center\"}>\r\n            <Grid item xs={4} style={{ marginTop: \"100px\" }}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Paper style={{ padding: \"10px\" }} elevation={3}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <p>\r\n                                    To log in get registered\r\n                                    <a\r\n                                        href={\"https://social-network.samuraijs.com/\"}\r\n                                        target={\"_blank\"}\r\n                                    >\r\n                                        here\r\n                                    </a>\r\n                                </p>\r\n                                <p>or use common test account credentials:</p>\r\n                                <p>Email: free@samuraijs.com</p>\r\n                                <p>Password: free</p>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    name={\"email\"}\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.email && formik.errors.email ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    name={\"password\"}\r\n                                    value={formik.values.password}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.password && formik.errors.password ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <FormControlLabel\r\n                                    label={\"Remember me\"}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            name={\"rememberMe\"}\r\n                                            value={formik.values.rememberMe}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    }\r\n                                />\r\n                                <Button\r\n                                    type={\"submit\"}\r\n                                    variant={\"contained\"}\r\n                                    color={\"primary\"}\r\n                                    onClick={formik.submitForm}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </Paper>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\store.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\App.tsx",["100"],"import React, { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { initialized, logout } from \"../../bll/reducers/app-reducer\"\r\nimport { getAppState } from \"../../../utils/selectors/selectors\"\r\nimport InterfaceApp from \"./InterfaceApp/InterfaceApp\"\r\n\r\nconst App: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initialized())\r\n    }, [])\r\n\r\n    const { status, isInitialized, isLogining } = useSelector(getAppState)\r\n\r\n    const logoutMe = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <InterfaceApp\r\n            isInitialized={isInitialized}\r\n            isLogining={isLogining}\r\n            logoutMe={logoutMe}\r\n            status={status}\r\n        />\r\n    )\r\n}\r\n\r\nexport default App\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\app-reducer.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\tasks-reducer.ts",["101"],"import {\r\n    AddTodolistType,\r\n    changeTodolistEntityStatus,\r\n    ChangeTodolistEntityStatusType,\r\n    RemoveTodolistType,\r\n    SetTodolistType,\r\n} from \"./todolists-reducer\"\r\nimport { TaskStatuses, TaskType, todolistsAPI } from \"../../server-api/todolists-api\"\r\nimport { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { AppRootStateType } from \"../store\"\r\nimport {\r\n    changeLoadingStatus,\r\n    ChangeLoadingStatusType,\r\n    RequestStatusType,\r\n    setAppError,\r\n    SetAppErrorType,\r\n} from \"./app-reducer\"\r\nimport {\r\n    handleServerAppError,\r\n    handleServerNetworkError,\r\n} from \"../../../utils/features/errors/error-utils\"\r\n\r\n\r\nexport type TaskStateRootType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskStateRootType>\r\n}\r\nexport type RemoveTaskType = ReturnType<typeof removeTask>\r\nexport type AddTaskType = ReturnType<typeof addTask>\r\nexport type ChangeTaskStatusType = ReturnType<typeof changeTaskStatus>\r\nexport type ChangeTaskTitleType = ReturnType<typeof changeTaskTitle>\r\nexport type SetTasksType = ReturnType<typeof setTasks>\r\nexport type ChangeTaskEntityStatusType = ReturnType<typeof changeTaskEntityStatus>\r\nexport type TodolistThunkCreatorType = ThunkAction<\r\n    Promise<void>,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType\r\n>\r\ntype ActionsType =\r\n    | RemoveTaskType\r\n    | AddTaskType\r\n    | ChangeTaskStatusType\r\n    | ChangeTaskTitleType\r\n    | AddTodolistType\r\n    | RemoveTodolistType\r\n    | SetTodolistType\r\n    | SetTasksType\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\n    | ChangeTaskEntityStatusType\r\n//\r\n//\r\nconst initialState: TasksStateType = {}\r\n//\r\n//\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = tasks.filter((t) => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopyThree = { ...state }\r\n            const tasks = stateCopyThree[action.task.todoListId]\r\n            const uppdateTask: TaskStateRootType = { ...action.task, entityStatus: \"idle\" }\r\n            const newTasks = [uppdateTask, ...tasks]\r\n            stateCopyThree[action.task.todoListId] = newTasks\r\n            return stateCopyThree\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todolistTasks = state[action.todolistId]\r\n            let newTasksArray = todolistTasks.map((t) =>\r\n                t.id === action.taskId ? { ...t, status: action.status } : t\r\n            )\r\n\r\n            state[action.todolistId] = newTasksArray\r\n            return { ...state }\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todolistTasks = state[action.todolistId]\r\n            let newTasksArray = todolistTasks.map((t) =>\r\n                t.id === action.taskId ? { ...t, title: action.title } : t\r\n            )\r\n\r\n            state[action.todolistId] = newTasksArray\r\n            return { ...state }\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: [],\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = { ...state }\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case \"SET-TODO\":\r\n            const stateCopy = { ...state }\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        case \"SET-TASKS\":\r\n            const stateCopyTwo = { ...state }\r\n            const tasksFromCurrentTodo = [...action.tasks]\r\n            const updateTasks: Array<TaskStateRootType> = tasksFromCurrentTodo.map((t) => ({\r\n                ...t,\r\n                entityStatus: \"idle\",\r\n            }))\r\n            stateCopyTwo[action.todolistId] = updateTasks\r\n            return stateCopyTwo\r\n        case \"CHANGE-ENTITYSTATUS-TASK\":\r\n            const task = state[action.todoId].find((t) => t.id === action.taskId)\r\n            if (task) {\r\n                task.entityStatus = action.entityStatus\r\n            }\r\n            return { ...state }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//\r\n//\r\nexport const removeTask = (taskId: string, todolistId: string) => {\r\n    return { type: \"REMOVE-TASK\", taskId, todolistId } as const\r\n}\r\nexport const addTask = (task: TaskType, todolistId: string) => {\r\n    return { type: \"ADD-TASK\", task, todolistId } as const\r\n}\r\nexport const changeTaskStatus = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return { type: \"CHANGE-TASK-STATUS\", status, todolistId, taskId } as const\r\n}\r\nexport const changeTaskTitle = (taskId: string, title: string, todolistId: string) => {\r\n    return { type: \"CHANGE-TASK-TITLE\", title, todolistId, taskId } as const\r\n}\r\nexport const setTasks = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return { type: \"SET-TASKS\", tasks, todolistId } as const\r\n}\r\nexport const changeTaskEntityStatus = (\r\n    todoId: string,\r\n    taskId: string,\r\n    entityStatus: RequestStatusType\r\n) => ({ type: \"CHANGE-ENTITYSTATUS-TASK\", todoId, taskId, entityStatus } as const)\r\n//\r\n//\r\nexport const setTasksThunk = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    todolistsAPI.getTasks(todolistId).then((resp) => {\r\n        dispatch(setTasks(resp.data.items, todolistId))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n    })\r\n}\r\nexport const deleteTasksThunk = (todolistId: string, taskID: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTaskEntityStatus(todolistId, taskID, \"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskID).then(() => {\r\n        dispatch(removeTask(taskID, todolistId))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n        dispatch(changeTaskEntityStatus(todolistId, taskID, \"succeeded\"))\r\n    })\r\n}\r\nexport const addTaskThunk = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(todolistId, \"loading\"))\r\n    todolistsAPI\r\n        .createTask(todolistId, taskTitile)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTask(res.data.data.item, todolistId))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"))\r\n        })\r\n}\r\nexport const changeTaskStatusThunk = (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodo = allTasksFromState[todolistId]\r\n        const currentTask = tasksForCurrentTodo.find((t) => t.id === taskId)\r\n        if (currentTask) {\r\n            dispatch(changeLoadingStatus(\"loading\"))\r\n            dispatch(changeTaskEntityStatus(todolistId, taskId, \"loading\"))\r\n            todolistsAPI\r\n                .updateTask(todolistId, taskId, {\r\n                    title: currentTask.title,\r\n                    startDate: currentTask.startDate,\r\n                    priority: currentTask.priority,\r\n                    description: currentTask.description,\r\n                    deadline: currentTask.deadline,\r\n                    status: status,\r\n                })\r\n                .then(() => {\r\n                    dispatch(changeTaskStatus(taskId, status, todolistId))\r\n                    dispatch(changeLoadingStatus(\"succeeded\"))\r\n                    dispatch(changeTaskEntityStatus(todolistId, taskId, \"succeeded\"))\r\n                })\r\n        }\r\n    }\r\n}\r\nexport const changeTaskTitleThunk = (todolistId: string, taskId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodo = allTasksFromState[todolistId]\r\n        const currentTask = tasksForCurrentTodo.find((t) => t.id === taskId)\r\n        if (currentTask) {\r\n            dispatch(changeLoadingStatus(\"loading\"))\r\n            dispatch(changeTaskEntityStatus(todolistId, taskId, \"loading\"))\r\n            todolistsAPI\r\n                .updateTask(todolistId, taskId, {\r\n                    title: title,\r\n                    startDate: currentTask.startDate,\r\n                    priority: currentTask.priority,\r\n                    description: currentTask.description,\r\n                    deadline: currentTask.deadline,\r\n                    status: currentTask.status,\r\n                })\r\n                .then((resp) => {\r\n                    if (resp.data.resultCode === 0) {\r\n                        dispatch(changeTaskTitle(taskId, title, todolistId))\r\n                    } else {\r\n                        handleServerAppError(resp.data, dispatch)\r\n                    }\r\n                    dispatch(changeLoadingStatus(\"succeeded\"))\r\n                    dispatch(changeTaskEntityStatus(todolistId, taskId, \"succeeded\"))\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                    dispatch(changeLoadingStatus(\"succeeded\"))\r\n                    dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"))\r\n                })\r\n        }\r\n    }\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\bll\\reducers\\todolists-reducer.ts",["102"],"import { Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { todolistsAPI, TodolistType } from \"../../server-api/todolists-api\"\r\nimport {\r\n    handleServerAppError,\r\n    handleServerNetworkError,\r\n} from \"../../../utils/features/errors/error-utils\"\r\nimport {\r\n    changeLoadingStatus,\r\n    ChangeLoadingStatusType,\r\n    RequestStatusType,\r\n    setAppError,\r\n    SetAppErrorType,\r\n} from \"./app-reducer\"\r\nimport { AppRootStateType } from \"../store\"\r\n\r\n\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolist>\r\nexport type AddTodolistType = ReturnType<typeof addTodolist>\r\nexport type ChangeTodolistTitleType = ReturnType<typeof changeTodolistTitle>\r\nexport type ChangeTodolistFilterType = ReturnType<typeof changeTodolistFilter>\r\nexport type SetTodolistType = ReturnType<typeof setTodolist>\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatus>\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TodolistThunkCreatorType = ThunkAction<\r\n    Promise<void>,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType\r\n>\r\ntype ActionsType =\r\n    | RemoveTodolistType\r\n    | AddTodolistType\r\n    | ChangeTodolistTitleType\r\n    | ChangeTodolistFilterType\r\n    | SetTodolistType\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\n//\r\n//\r\nconst initialState: Array<TodolistDomainType> = []\r\n//\r\n//\r\nexport const todolistsReducer = (\r\n    state = initialState,\r\n    action: ActionsType\r\n): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter((tl) => tl.id !== action.id)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const filter: FilterValuesType = \"all\"\r\n            const entityStatus: RequestStatusType = \"idle\"\r\n            const newTodo = { ...action.todolist, filter: filter, entityStatus: entityStatus }\r\n            return [...state, newTodo]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            const todolist = state.find((tl) => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const todolist = state.find((tl) => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"SET-TODO\":\r\n            return action.todos.map((tl) => ({ ...tl, filter: \"all\", entityStatus: \"idle\" }))\r\n        case \"CHANGE-ENTITYSTATUS\":\r\n            const todolist = state.find((tl) => tl.id === action.todoId)\r\n            if (todolist) {\r\n                todolist.entityStatus = action.entityStatus\r\n            }\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//\r\n//\r\nexport const removeTodolist = (todolistId: string) => {\r\n    return { type: \"REMOVE-TODOLIST\", id: todolistId } as const\r\n}\r\nexport const addTodolist = (todolist: TodolistType) => {\r\n    return { type: \"ADD-TODOLIST\", todolist } as const\r\n}\r\nexport const changeTodolistTitle = (id: string, title: string) => {\r\n    return { type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title } as const\r\n}\r\nexport const changeTodolistFilter = (id: string, filter: FilterValuesType) => {\r\n    return { type: \"CHANGE-TODOLIST-FILTER\", id: id, filter: filter } as const\r\n}\r\nexport const setTodolist = (todos: Array<TodolistType>) => ({ type: \"SET-TODO\", todos } as const)\r\nexport const changeTodolistEntityStatus = (todoId: string, entityStatus: RequestStatusType) =>\r\n    ({ type: \"CHANGE-ENTITYSTATUS\", todoId, entityStatus } as const)\r\n//\r\n//\r\nexport const setTodoThunk = () => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    todolistsAPI.getTodolists().then((resp) => {\r\n        dispatch(setTodolist(resp.data))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n    })\r\n}\r\nexport const addTodoThunk = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    todolistsAPI\r\n        .createTodolist(title)\r\n        .then((resp) => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(addTodolist(resp.data.data.item))\r\n            } else {\r\n                handleServerAppError(resp.data, dispatch)\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n        })\r\n}\r\nexport const deleteTodoThunk = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(id, \"loading\"))\r\n    todolistsAPI.deleteTodolist(id).then(() => {\r\n        dispatch(removeTodolist(id))\r\n        dispatch(changeTodolistEntityStatus(id, \"idle\"))\r\n        dispatch(changeLoadingStatus(\"succeeded\"))\r\n    })\r\n}\r\nexport const changeTitleTodoThunk = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(id, \"loading\"))\r\n    todolistsAPI\r\n        .updateTodolist(id, title)\r\n        .then((resp) => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitle(id, title))\r\n                dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n            } else {\r\n                handleServerAppError(resp.data, dispatch)\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeLoadingStatus(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatus(id, \"succeeded\"))\r\n        })\r\n}\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\selectors\\selectors.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\errorSnackBar\\ErrorSnackbar.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\addItemForm\\AddItemForm.tsx",["103","104","105"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled: \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled === \"loading\"}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled === \"loading\"}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\server-api\\todolists-api.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\Task.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\editableSpan\\EditableSpan.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\errors\\error-utils.ts",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\main\\ui\\app\\InterfaceApp\\InterfaceApp.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPageContainer.tsx",["106"],"import React, { useCallback, useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getAppState, getTodoState } from \"../../../selectors/selectors\"\r\nimport { addTodoThunk, setTodoThunk } from \"../../../../main/bll/reducers/todolists-reducer\"\r\nimport TodolistsPage from \"./TodolistsPage\"\r\n\r\nconst TodolistsContainer: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isLogining) {\r\n            dispatch(setTodoThunk())\r\n        } else return\r\n    }, [])\r\n\r\n    const [...todolists] = useSelector(getTodoState)\r\n    const { isLogining } = useSelector(getAppState)\r\n\r\n    const addTodolist = useCallback(\r\n        (title: string) => {\r\n            dispatch(addTodoThunk(title))\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    return <TodolistsPage addTodolist={addTodolist} isLogining={isLogining} todolists={todolists} />\r\n}\r\n\r\nexport default TodolistsContainer\r\n","E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolistsPage\\TodolistsPage.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\TodolistContainer.tsx",["107","108","109","110","111"],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\todolists\\todolist\\Todolist.tsx",[],"E:\\IT-Incubator\\GitHub-projects\\TodoListSmithPovvi-Project\\src\\utils\\features\\tasks\\TaskContainer.tsx",["112","113","114","115","116"],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":64,"column":37,"nodeType":"123","endLine":67,"endColumn":38},{"ruleId":"124","severity":1,"message":"125","line":12,"column":8,"nodeType":"126","endLine":12,"endColumn":10,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":16,"column":5,"nodeType":"130","messageId":"131","endLine":16,"endColumn":16},{"ruleId":"128","severity":1,"message":"129","line":12,"column":5,"nodeType":"130","messageId":"131","endLine":12,"endColumn":16},{"ruleId":"128","severity":1,"message":"132","line":2,"column":9,"nodeType":"130","messageId":"131","endLine":2,"endColumn":12},{"ruleId":"128","severity":1,"message":"133","line":2,"column":14,"nodeType":"130","messageId":"131","endLine":2,"endColumn":20},{"ruleId":"128","severity":1,"message":"134","line":2,"column":22,"nodeType":"130","messageId":"131","endLine":2,"endColumn":33},{"ruleId":"124","severity":1,"message":"135","line":14,"column":8,"nodeType":"126","endLine":14,"endColumn":10,"suggestions":"136"},{"ruleId":"124","severity":1,"message":"125","line":31,"column":8,"nodeType":"126","endLine":31,"endColumn":12,"suggestions":"137"},{"ruleId":"124","severity":1,"message":"138","line":41,"column":9,"nodeType":"126","endLine":41,"endColumn":13,"suggestions":"139"},{"ruleId":"124","severity":1,"message":"140","line":46,"column":8,"nodeType":"126","endLine":46,"endColumn":10,"suggestions":"141"},{"ruleId":"124","severity":1,"message":"138","line":52,"column":9,"nodeType":"126","endLine":52,"endColumn":13,"suggestions":"142"},{"ruleId":"124","severity":1,"message":"138","line":58,"column":8,"nodeType":"126","endLine":58,"endColumn":10,"suggestions":"143"},{"ruleId":"124","severity":1,"message":"138","line":27,"column":9,"nodeType":"126","endLine":27,"endColumn":21,"suggestions":"144"},{"ruleId":"124","severity":1,"message":"138","line":32,"column":8,"nodeType":"126","endLine":32,"endColumn":10,"suggestions":"145"},{"ruleId":"124","severity":1,"message":"138","line":36,"column":9,"nodeType":"126","endLine":36,"endColumn":30,"suggestions":"146"},{"ruleId":"124","severity":1,"message":"147","line":48,"column":9,"nodeType":"126","endLine":48,"endColumn":30,"suggestions":"148"},{"ruleId":"124","severity":1,"message":"149","line":55,"column":9,"nodeType":"126","endLine":55,"endColumn":30,"suggestions":"150"},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["153"],"@typescript-eslint/no-unused-vars","'setAppError' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'isLogining'. Either include them or remove the dependency array.",["154"],["155"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["156"],"React Hook useCallback has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["157"],["158"],["159"],["160"],["161"],["162"],"React Hook useCallback has a missing dependency: 'changeStatus'. Either include it or remove the dependency array.",["163"],"React Hook useCallback has a missing dependency: 'changeTaskTitle'. Either include it or remove the dependency array.",["164"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"169","fix":"171"},{"desc":"172","fix":"173"},{"desc":"169","fix":"174"},{"desc":"165","fix":"175"},{"desc":"165","fix":"176"},{"desc":"165","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [dispatch]",{"range":"184","text":"185"},"Update the dependencies array to be: [dispatch, isLogining]",{"range":"186","text":"187"},"Update the dependencies array to be: [dispatch, id]",{"range":"188","text":"189"},{"range":"190","text":"189"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"191","text":"192"},{"range":"193","text":"189"},{"range":"194","text":"185"},{"range":"195","text":"185"},{"range":"196","text":"185"},"Update the dependencies array to be: [dispatch, todolistId, task.id]",{"range":"197","text":"198"},"Update the dependencies array to be: [changeStatus, task.id, todolistId]",{"range":"199","text":"200"},"Update the dependencies array to be: [changeTaskTitle, task.id, todolistId]",{"range":"201","text":"202"},[439,441],"[dispatch]",[543,545],"[dispatch, isLogining]",[958,962],"[dispatch, id]",[1200,1204],[1315,1317],"[dispatch, props.id]",[1473,1477],[1674,1676],[930,942],[1125,1127],[1246,1267],"[dispatch, todolistId, task.id]",[1623,1644],"[changeStatus, task.id, todolistId]",[1817,1838],"[changeTaskTitle, task.id, todolistId]"]