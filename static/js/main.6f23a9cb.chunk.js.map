{"version":3,"sources":["main/server-api/todolists-api.ts","utils/features/errors/error-utils.ts","main/bll/reducers/app-reducer.ts","utils/selectors/selectors.ts","utils/features/errors/errorSnackBar/ErrorSnackbar.tsx","utils/features/logining/Logining.tsx","utils/features/logining/LoginingContainer.tsx","main/bll/reducers/todolists-reducer.ts","utils/features/addItemForm/AddItemForm.tsx","main/bll/reducers/tasks-reducer.ts","utils/features/editableSpan/EditableSpan.tsx","utils/features/tasks/Task.tsx","utils/features/tasks/TaskContainer.tsx","utils/features/todolists/todolist/Todolist.tsx","utils/features/todolists/todolist/TodolistContainer.tsx","utils/features/todolists/todolistsPage/TodolistsPage.tsx","utils/features/todolists/todolistsPage/TodolistsPageContainer.tsx","main/ui/app/InterfaceApp/InterfaceApp.tsx","main/ui/app/App.tsx","main/bll/store.ts","reportWebVitals.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","handleServerAppError","data","dispatch","messages","length","setAppError","changeLoadingStatus","handleServerNetworkError","error","message","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","LoginingData","initialState","status","isLogining","isInitialized","auth","userId","email","login","type","setUserData","userData","isLoginingChange","logVal","getAppState","state","app","getTodoState","todolists","getTaskState","tasks","Alert","props","elevation","variant","ErrorSnackbar","useSelector","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Logining","loginIn","isLoginig","formik","useFormik","initialValues","password","rememberMe","captcha","validate","values","errors","test","onSubmit","to","Grid","container","direction","justify","alignItems","item","xs","style","marginTop","handleSubmit","padding","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","name","value","onChange","handleChange","onBlur","handleBlur","touched","color","FormControlLabel","control","Checkbox","onClick","submitForm","LoginingContainer","loginingData","a","resultCode","logining","changeTodolistEntityStatus","todoId","entityStatus","AddItemForm","React","memo","console","log","useState","setTitle","setError","addItem","trim","e","currentTarget","onKeyPress","charCode","helperText","disabled","AddBox","changeTaskEntityStatus","EditableSpan","editMode","setEditMode","autoFocus","entityStatusForTodo","onDoubleClick","entityStatusForTask","undefined","Task","task","onTitleChangeHandler","onClickHandler","onChangeHandler","className","Completed","checked","Delete","TasksContainer","changeStatus","useCallback","getState","currentTask","find","t","startDate","priority","description","deadline","then","changeTaskStatus","changeTaskStatusThunk","changeTaskTitle","newTitle","resp","catch","changeTaskTitleThunk","taskID","removeTask","deleteTasksThunk","newIsDoneValue","New","newValue","Todolist","changeFilter","filter","changeTodolistTitle","removeTodolist","addTask","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksFiltered","map","paddingTop","TodolistContainer","useEffect","setTasks","items","res","deleteTodoThunk","changeTitleTodoThunk","action","changeTodolistFilter","TodolistsPage","addTodolist","spacing","tl","TodolistsContainer","todos","todolist","addTodoThunk","InterfaceApp","logoutMe","position","backgroundColor","edge","aria-label","Menu","fixed","exact","path","render","from","App","response","initVal","rootReducer","combineReducers","stateCopy","newTasks","stateCopyThree","todoListId","uppdateTask","todolistTasks","newTasksArray","copyState","forEach","stateCopyTwo","tasksFromCurrentTodo","updateTasks","newTodo","store","createStore","applyMiddleware","thunk","window","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"mJA0EYA,EAMAC,E,0FCvECC,EAAuB,SAChCC,EACAC,GAEID,EAAKE,SAASC,OACdF,EAASG,EAAYJ,EAAKE,SAAS,KAEnCD,EAASG,EAAY,wBAEzBH,EAASI,EAAoB,eAGpBC,EAA2B,SACpCC,EACAN,GAEAA,EAASG,EAAYG,EAAMC,UAC3BP,EAASI,EAAoB,Y,SDxB3BI,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAe,WAGpB,OADgBN,EAASO,IAAoB,eAFxCD,EAAe,SAKTE,GAIX,OAHgBR,EAASS,KAA2C,aAAc,CAC9ED,MAAOA,KAPNF,EAAe,SAWTI,GAEX,OADgBV,EAASW,OAAT,qBAA4CD,KAZvDJ,EAAe,SAeTI,EAAYF,GAEvB,OADgBR,EAASY,IAAT,qBAAyCF,GAAM,CAAEF,MAAOA,KAhBnEF,EAAe,SAmBfO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YApBFP,EAAe,SAsBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAvBlER,EAAe,SAyBbO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA8DI,EAA9D,UAAkF,CACrFL,MAAOO,KA3BNT,EAAe,SA8BbO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAT,qBACWC,EADX,kBAC+BC,GAClCE,IAjCCV,EAAe,SAoChBW,GACJ,OAAOjB,EAASS,KAAuC,aAAcQ,IArChEX,EAAe,WAwCpB,OAAON,EAASO,IAMd,YA9CGD,EAAe,WAiDpB,OAAON,EAASW,OAAqB,gB,SAejCvB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KE7DZ,IAAM6B,EAAe,CACjBC,OAAQ,UACRrB,MAAO,KACPsB,YAAY,EACZC,eAAe,EACfC,KAAM,CACFC,OAAQ,EACRC,MAAO,GACPC,MAAO,KA2BF7B,EAAsB,SAACuB,GAAD,MAC9B,CAAEO,KAAM,iBAAkBP,WAClBxB,EAAc,SAACG,GAAD,MAAoB,CAAE4B,KAAM,gBAAiB5B,UAE3D6B,EAAc,SAACC,GAAD,MACtB,CAAEF,KAAM,eAAgBE,aAChBC,EAAmB,SAACC,GAAD,MAAsB,CAAEJ,KAAM,kBAAmBI,WC1DpEC,EAAc,SAACC,GAAD,OAA4BA,EAAMC,KAChDC,EAAe,SAACF,GAAD,OAA4BA,EAAMG,WACjDC,EAAe,SAACJ,GAAD,OAA4BA,EAAMK,O,uJCG9D,SAASC,GAAMC,GACX,OAAO,eAAC,IAAD,aAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAGjD,SAASG,KACZ,IAAM5C,EAAQ6C,aAA6C,SAACX,GAAD,OAAWA,EAAMC,IAAInC,SAC1EN,EAAWoD,cACXC,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJvD,EFuCyB,CAAEkC,KAAM,qBEpCrC,OACI,eAACsB,EAAA,EAAD,CAAUC,KAAe,MAATnD,EAAeoD,iBAAkB,IAAMC,QAASN,EAAhE,SACI,eAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAtC,SACKtD,M,kHCEJuD,GAAuD,SAACd,GAAW,IACpEe,EAAuBf,EAAvBe,QAASC,EAAchB,EAAdgB,UAEXC,EAASC,aAAU,CACrBC,cAAe,CACXlC,MAAO,GACPmC,SAAU,GACVC,YAAY,EACZC,SAAS,GAEbC,SAAU,SAACC,GACP,IAAMC,EAAwB,GAS9B,OARKD,EAAOvC,MAEA,4CAA4CyC,KAAKF,EAAOvC,SAChEwC,EAAOxC,MAAQ,yBAFfwC,EAAOxC,MAAQ,sBAIduC,EAAOJ,WACRK,EAAOL,SAAW,uBAEfK,GAEXE,SAAU,SAACH,GACPT,EAAQS,MAIhB,OAAIR,EAAkB,eAAC,IAAD,CAAUY,GAAI,MAGhC,eAACC,GAAA,EAAD,CAAMC,WAAS,EAACC,UAAW,SAAUC,QAAS,SAAUC,WAAY,SAApE,SACI,eAACJ,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,MAAO,CAAEC,UAAW,SAAtC,SACI,uBAAMV,SAAUV,EAAOqB,aAAvB,SACI,eAAC,KAAD,CAAOF,MAAO,CAAEG,QAAS,QAAUtC,UAAW,EAA9C,SACI,gBAACuC,GAAA,EAAD,WACI,gBAACC,GAAA,EAAD,WACI,0DAEI,oBACIC,KAAM,wCACNC,OAAQ,SAFZ,qBAOJ,yEACA,2DACA,mDAEJ,gBAACC,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CACIC,MAAM,QACNC,OAAO,SACPC,KAAM,QACNC,MAAOhC,EAAOO,OAAOvC,MACrBiE,SAAUjC,EAAOkC,aACjBC,OAAQnC,EAAOoC,aAElBpC,EAAOqC,QAAQrE,OAASgC,EAAOQ,OAAOxC,MACnC,sBAAKmD,MAAO,CAAEmB,MAAO,OAArB,SAA+BtC,EAAOQ,OAAOxC,QAE7C,+BAEJ,eAAC4D,GAAA,EAAD,CACI1D,KAAK,WACL2D,MAAM,WACNC,OAAO,SACPC,KAAM,WACNC,MAAOhC,EAAOO,OAAOJ,SACrB8B,SAAUjC,EAAOkC,aACjBC,OAAQnC,EAAOoC,aAElBpC,EAAOqC,QAAQlC,UAAYH,EAAOQ,OAAOL,SACtC,sBAAKgB,MAAO,CAAEmB,MAAO,OAArB,SAA+BtC,EAAOQ,OAAOL,WAE7C,+BAEJ,eAACoC,GAAA,EAAD,CACIV,MAAO,cACPW,QACI,eAACC,GAAA,EAAD,CACIV,KAAM,aACNC,MAAOhC,EAAOO,OAAOH,WACrB6B,SAAUjC,EAAOkC,iBAI7B,eAAC,KAAD,CACIhE,KAAM,SACNe,QAAS,YACTqD,MAAO,UACPI,QAAS1C,EAAO2C,WAJpB,kCC9FjBC,GAZoC,WAC/C,IAAM5G,EAAWoD,cAETxB,EAAeuB,YAAYZ,GAA3BX,WAMR,OAAO,eAAC,GAAD,CAAUkC,QAJD,SAAC+C,GACb7G,EJkDgB,SAAC6G,GACrB,8CAAO,WAAO7G,GAAP,uBAAA8G,EAAA,6DACH9G,EAASI,EAAoB,YAD1B,kBAIWU,EAAqB+F,GAJhC,8BAKG9G,KALH,gBAGSgH,EAHT,EAGSA,WAAYhH,EAHrB,EAGqBA,KAAME,EAH3B,EAG2BA,SAGpB8B,EAAShC,EAAKgC,OACD,IAAfgF,GACA/G,EAASmC,EAAY,CAAEJ,SAAQC,MAAO,GAAIC,MAAO,MACjDjC,EAASqC,GAAiB,KAE1BrC,EAASG,EAAYF,EAAS,KAXnC,kDAcCI,EAAyB,EAAD,GAAQL,GAdjC,yBAgBCA,EAASI,EAAoB,cAhB9B,6EAAP,sDInDa4G,CAASH,KAGa9C,UAAWnC,K,mBC0B5CF,GAA0C,GAwDnCuF,GAA6B,SAACC,EAAgBC,GAAjB,MACrC,CAAEjF,KAAM,sBAAuBgF,SAAQC,iB,iDC1F/BC,GAAcC,IAAMC,MAAK,SAAUvE,GAC5CwE,QAAQC,IAAI,sBAD6D,MAGjDC,mBAAS,IAHwC,oBAGpEzG,EAHoE,KAG7D0G,EAH6D,OAIjDD,mBAAwB,MAJyB,oBAIpEnH,EAJoE,KAI7DqH,EAJ6D,KAMnEC,EAAU,WACS,KAAjB5G,EAAM6G,QACN9E,EAAM6E,QAAQ5G,GACd0G,EAAS,KAETC,EAAS,sBAiBjB,OACI,iCACI,eAAC/B,GAAA,EAAD,CACI3C,QAAQ,WACR3C,QAASA,EACT0F,MAAOhF,EACPiF,SAnBY,SAAC6B,GACrBJ,EAASI,EAAEC,cAAc/B,QAmBjBgC,WAhBc,SAACF,GACT,OAAVxH,GACAqH,EAAS,MAEM,KAAfG,EAAEG,UACFL,KAYI/B,MAAM,QACNqC,WAAY5H,EACZ6H,SAA6B,YAAnBpF,EAAMoF,WAEpB,eAAC,KAAD,CAAY7B,MAAM,UAAUI,QAASkB,EAASO,SAA6B,YAAnBpF,EAAMoF,SAA9D,SACI,eAACC,GAAA,EAAD,Y,SCKV1G,GAA+B,GAyFxB2G,GAAyB,SAClCnB,EACA5F,EACA6F,GAHkC,MAIhC,CAAEjF,KAAM,2BAA4BgF,SAAQ5F,SAAQ6F,iBCzI7CmB,GAAejB,IAAMC,MAAK,SAAUvE,GAA+B,IAAD,EAC7C0E,oBAAS,GADoC,oBACtEc,EADsE,KAC5DC,EAD4D,OAEnDf,mBAAS1E,EAAMiD,OAFoC,oBAEtEhF,EAFsE,KAE/D0G,EAF+D,KAgB3E,OAAOa,EACH,eAAC3C,GAAA,EAAD,CACII,MAAOhF,EACPiF,SAPY,SAAC6B,GACjBJ,EAASI,EAAEC,cAAc/B,QAOrByC,WAAS,EACTtC,OAbiB,WACrBqC,GAAY,GACZzF,EAAMkD,SAASjF,IAYXmH,SAAwC,YAA9BpF,EAAM2F,sBAGpB,uBACIC,cACkC,YAA9B5F,EAAM6F,qBAAmE,YAA9B7F,EAAM2F,oBAvBpC,WACrBF,GAAY,GACZd,EAAS3E,EAAMiD,aAuBD6C,EAJd,SAOK9F,EAAMiD,W,UCLJ8C,GAxBsCzB,IAAMC,MAAK,SAACvE,GAAW,IAChEgG,EACJhG,EADIgG,KAAMH,EACV7F,EADU6F,oBAAqBI,EAC/BjG,EAD+BiG,qBAAsBC,EACrDlG,EADqDkG,eAAgBC,EACrEnG,EADqEmG,gBAGzE,OACI,uBAAmBC,UAAWJ,EAAKpH,SAAW/B,EAAawJ,UAAY,UAAY,GAAnF,UACI,eAAC3C,GAAA,EAAD,CACI4C,QAASN,EAAKpH,SAAW/B,EAAawJ,UACtC9C,MAAM,UACNL,SAAUiD,EACVf,SAAkC,YAAxBS,IAEd,eAACN,GAAD,CACItC,MAAO+C,EAAK/H,MACZiF,SAAU+C,EACVJ,oBAAqBA,IAEzB,eAAC,KAAD,CAAYlC,QAASuC,EAAgBd,SAAkC,YAAxBS,EAA/C,SACI,eAACU,GAAA,EAAD,QAbEP,EAAK7H,OCiDRqI,GAnDgD,SAACxG,GAAW,IAC/DgG,EAA0ChG,EAA1CgG,KAAM1H,EAAoC0B,EAApC1B,WAAYuH,EAAwB7F,EAAxB6F,oBAEpB5I,EAAWoD,cAEXoG,EAAeC,uBACjB,SAACvI,EAAYS,EAAsBN,GAC/BrB,EHkKyB,SAACqB,EAAoBC,EAAgBK,GACtE,OAAO,SAAC3B,EAAoB0J,GACxB,IAEMC,EAFoBD,IAAW7G,MACSxB,GACNuI,MAAK,SAACC,GAAD,OAAOA,EAAE3I,KAAOI,KACzDqI,IACA3J,EAASI,EAAoB,YAC7BJ,EAASqI,GAAuBhH,EAAYC,EAAQ,YACpDR,EACgBO,EAAYC,EAAQ,CAC5BN,MAAO2I,EAAY3I,MACnB8I,UAAWH,EAAYG,UACvBC,SAAUJ,EAAYI,SACtBC,YAAaL,EAAYK,YACzBC,SAAUN,EAAYM,SACtBtI,OAAQA,IAEXuI,MAAK,WACFlK,EArEY,SAACsB,EAAgBK,EAAsBN,GACnE,MAAO,CAAEa,KAAM,qBAAsBP,SAAQN,aAAYC,UAoEhC6I,CAAiB7I,EAAQK,EAAQN,IAC1CrB,EAASI,EAAoB,cAC7BJ,EAASqI,GAAuBhH,EAAYC,EAAQ,mBGtLnD8I,CAAsB/I,EAAYH,EAAIS,MAEnD,CAACN,IAGCgJ,EAAkBZ,uBAAY,SAACvI,EAAYoJ,EAAkBjJ,GAC/DrB,EHqL4B,SAACqB,EAAoBC,EAAgBN,GACrE,OAAO,SAAChB,EAAoB0J,GACxB,IAEMC,EAFoBD,IAAW7G,MACSxB,GACNuI,MAAK,SAACC,GAAD,OAAOA,EAAE3I,KAAOI,KACzDqI,IACA3J,EAASI,EAAoB,YAC7BJ,EAASqI,GAAuBhH,EAAYC,EAAQ,YACpDR,EACgBO,EAAYC,EAAQ,CAC5BN,MAAOA,EACP8I,UAAWH,EAAYG,UACvBC,SAAUJ,EAAYI,SACtBC,YAAaL,EAAYK,YACzBC,SAAUN,EAAYM,SACtBtI,OAAQgI,EAAYhI,SAEvBuI,MAAK,SAACK,GAC0B,IAAzBA,EAAKxK,KAAKgH,WACV/G,EA5FO,SAACsB,EAAgBN,EAAeK,GAC3D,MAAO,CAAEa,KAAM,oBAAqBlB,QAAOK,aAAYC,UA2F1B+I,CAAgB/I,EAAQN,EAAOK,IAExCvB,EAAqByK,EAAKxK,KAAMC,GAEpCA,EAASI,EAAoB,cAC7BJ,EAASqI,GAAuBhH,EAAYC,EAAQ,iBAEvDkJ,OAAM,SAAClK,GACJD,EAAyBC,EAAON,GAChCA,EAASI,EAAoB,cAC7BJ,EAASiH,GAA2B5F,EAAY,mBGlNnDoJ,CAAqBpJ,EAAYH,EAAIoJ,MAC/C,IAEGrB,EAAiBQ,uBACnB,kBAAMzJ,EH2HkB,SAACqB,EAAoBqJ,GAArB,OAAwC,SAAC1K,GACrEA,EAASI,EAAoB,YAC7BJ,EAASqI,GAAuBhH,EAAYqJ,EAAQ,YACpD5J,EAAwBO,EAAYqJ,GAAQR,MAAK,WAC7ClK,EAhCkB,SAACsB,EAAgBD,GACvC,MAAO,CAAEa,KAAM,cAAeZ,SAAQD,cA+BzBsJ,CAAWD,EAAQrJ,IAC5BrB,EAASI,EAAoB,cAC7BJ,EAASqI,GAAuBhH,EAAYqJ,EAAQ,kBGjIrCE,CAAiBvJ,EAAY0H,EAAK7H,OACjD,CAACG,EAAY0H,EAAK7H,KAGhBgI,EAAkBO,uBACpB,SAAC3B,GACG,IAAI+C,EAAiB/C,EAAEC,cAAcsB,QACrCG,EACIT,EAAK7H,GACL2J,EAAiBjL,EAAawJ,UAAYxJ,EAAakL,IACvDzJ,KAGR,CAAC0H,EAAK7H,GAAIG,IAGR2H,EAAuBS,uBACzB,SAACsB,GACGV,EAAgBtB,EAAK7H,GAAI6J,EAAU1J,KAEvC,CAAC0H,EAAK7H,GAAIG,IAGd,OACI,eAAC,GAAD,CACI0H,KAAMA,EACNH,oBAAqBA,EACrBI,qBAAsBA,EACtBC,eAAgBA,EAChBC,gBAAiBA,KCyCd8B,GAjF8C3D,IAAMC,MAAK,SAACvE,GAAW,IAE5EkI,EASAlI,EATAkI,aACAC,EAQAnI,EARAmI,OACArI,EAOAE,EAPAF,MACA7B,EAMA+B,EANA/B,MACAmK,EAKApI,EALAoI,oBACAC,EAIArI,EAJAqI,eACAC,EAGAtI,EAHAsI,QACAnK,EAEA6B,EAFA7B,GACAiG,EACApE,EADAoE,aAGEmE,EAAoB7B,uBAAY,kBAAMwB,EAAa,MAAO/J,KAAK,CAACA,EAAI+J,IAEpEM,EAAuB9B,uBAAY,kBAAMwB,EAAa,SAAU/J,KAAK,CAACA,EAAI+J,IAE1EO,EAA0B/B,uBAC5B,kBAAMwB,EAAa,YAAa/J,KAChC,CAACA,EAAI+J,IAGLQ,EAAuC,aAAO5I,GASlD,MAPe,WAAXqI,IACAO,EAAgBA,EAAcP,QAAO,SAACrB,GAAD,OAAOA,EAAElI,SAAW/B,EAAakL,QAE3D,cAAXI,IACAO,EAAgBA,EAAcP,QAAO,SAACrB,GAAD,OAAOA,EAAElI,SAAW/B,EAAawJ,cAItE,iCACI,gCACI,eAACd,GAAD,CACItC,MAAOhF,EACPiF,SAAUkF,EACVzC,oBAAqBvB,IAEzB,eAAC,KAAD,CAAYT,QAAS0E,EAAgBjD,SAAiC,YAAvBpF,EAAMoE,aAArD,SACI,eAACmC,GAAA,EAAD,SAGR,eAAClC,GAAD,CAAaQ,QAASyD,EAASlD,SAAUpF,EAAMoE,eAC/C,+BACKsE,EAAcC,KAAI,SAAC7B,GAAD,OACf,eAAC,GAAD,CAEId,KAAMc,EACNxI,WAAYH,EACZ0H,oBAAqBzB,GAHhB0C,EAAE3I,SAOnB,uBAAKiE,MAAO,CAAEwG,WAAY,QAA1B,UACI,eAAC,KAAD,CACI1I,QAAoB,QAAXiI,EAAmB,WAAa,OACzCxE,QAAS4E,EACThF,MAAO,UAHX,iBAOA,eAAC,KAAD,CACIrD,QAAoB,WAAXiI,EAAsB,WAAa,OAC5CxE,QAAS6E,EACTjF,MAAO,UAHX,oBAOA,eAAC,KAAD,CACIrD,QAAoB,cAAXiI,EAAyB,WAAa,OAC/CxE,QAAS8E,EACTlF,MAAO,YAHX,gCCrBDsF,GAnD2DvE,IAAMC,MAAK,SAACvE,GAAW,IACrF7B,EAAoC6B,EAApC7B,GAAIiG,EAAgCpE,EAAhCoE,aAAcnG,EAAkB+B,EAAlB/B,MAAOkK,EAAWnI,EAAXmI,OAE3BlL,EAAWoD,cAEjByI,qBAAU,WL6He,IAACxK,EK5HtBrB,GL4HsBqB,EK5HCH,EL4HsB,SAAClB,GAClDA,EAASI,EAAoB,YAC7BU,EAAsBO,GAAY6I,MAAK,SAACK,GACpCvK,EAZgB,SAAC6C,EAAwBxB,GAC7C,MAAO,CAAEa,KAAM,YAAaW,QAAOxB,cAWtByK,CAASvB,EAAKxK,KAAKgM,MAAO1K,IACnCrB,EAASI,EAAoB,sBK/H9B,CAACc,IAEJ,IAEI2B,EAFoBM,YAAYP,GAEN1B,GAExBmK,EAAU5B,uBACZ,SAACzI,GLoImB,IAACK,EAAoBE,EKnIrCvB,GLmIiBqB,EKnIKH,ELmIeK,EKnIXP,ELmIkC,SAAChB,GACrEA,EAASI,EAAoB,YAC7BJ,EAASiH,GAA2B5F,EAAY,YAChDP,EACgBO,EAAYE,GACvB2I,MAAK,SAAC8B,GACyB,IAAxBA,EAAIjM,KAAKgH,WACT/G,EAzCO,SAAC+I,EAAgB1H,GACpC,MAAO,CAAEa,KAAM,WAAY6G,OAAM1H,cAwCZgK,CAAQW,EAAIjM,KAAKA,KAAKkF,KAAM5D,IAErCvB,EAAqBkM,EAAIjM,KAAMC,GAEnCA,EAASI,EAAoB,cAC7BJ,EAASiH,GAA2B5F,EAAY,iBAEnDmJ,OAAM,SAAClK,GACJD,EAAyBC,EAAON,GAChCA,EAASI,EAAoB,cAC7BJ,EAASiH,GAA2B5F,EAAY,sBKlJpD,CAACH,IAGCkK,EAAiB3B,uBAAY,WAC/BzJ,EPoFuB,SAACkB,GAAD,OAAgB,SAAClB,GAC5CA,EAASI,EAAoB,YAC7BJ,EAASiH,GAA2B/F,EAAI,YACxCJ,EAA4BI,GAAIgJ,MAAK,WACjClK,EA3CG,CAAEkC,KAAM,kBAAmBhB,GA2CNA,IACxBlB,EAASiH,GAA2B/F,EAAI,SACxClB,EAASI,EAAoB,kBO1FpB6L,CAAgBlJ,EAAM7B,OAChC,IAEGiK,EAAsB1B,uBACxB,SAACzI,GACGhB,EPwFwB,SAACkB,EAAYF,GAAb,OAA+B,SAAChB,GAChEA,EAASI,EAAoB,YAC7BJ,EAASiH,GAA2B/F,EAAI,YACxCJ,EACoBI,EAAIF,GACnBkJ,MAAK,SAACK,GAC0B,IAAzBA,EAAKxK,KAAKgH,YACV/G,EAlDmB,SAACkB,EAAYF,GAC5C,MAAO,CAAEkB,KAAM,wBAAyBhB,GAAIA,EAAIF,MAAOA,GAiDlCmK,CAAoBjK,EAAIF,IACjChB,EAASiH,GAA2B/F,EAAI,eAExCpB,EAAqByK,EAAKxK,KAAMC,GAEpCA,EAASI,EAAoB,cAC7BJ,EAASiH,GAA2B/F,EAAI,iBAE3CsJ,OAAM,SAAClK,GACJD,EAAyBC,EAAON,GAChCA,EAASI,EAAoB,cAC7BJ,EAASiH,GAA2B/F,EAAI,kBO1G/BgL,CAAqBhL,EAAIF,MAEtC,CAACE,IAGC+J,EAAexB,uBAAY,SAACzD,EAAyB3E,GACvD,IAAM8K,EP0CsB,SAACjL,EAAYgK,GAC7C,MAAO,CAAEhJ,KAAM,yBAA0BhB,GAAIA,EAAIgK,OAAQA,GO3CtCkB,CAAqB/K,EAAY2E,GAChDhG,EAASmM,KACV,IAEH,OACI,eAAC,GAAD,CACIjL,GAAIA,EACJmK,QAASA,EACTJ,aAAcA,EACdE,oBAAqBA,EACrBhE,aAAcA,EACd+D,OAAQA,EACRE,eAAgBA,EAChBvI,MAAOA,EACP7B,MAAOA,OCtBJqL,GA9BmD,SAACtJ,GAAW,IAClEnB,EAAuCmB,EAAvCnB,WAAY0K,EAA2BvJ,EAA3BuJ,YAAa3J,EAAcI,EAAdJ,UAEjC,OAAKf,EAGD,uCACI,eAAC,KAAD,CAAMiD,WAAS,EAACM,MAAO,CAAEG,QAAS,QAAlC,SACI,eAAC8B,GAAD,CAAaQ,QAAS0E,EAAanE,SAAU,WAEjD,eAAC,KAAD,CAAMtD,WAAS,EAAC0H,QAAS,EAAzB,SACK5J,EAAU+I,KAAI,SAACc,GACZ,OACI,eAAC,KAAD,CAAMvH,MAAI,EAAV,SACI,eAAC,KAAD,CAAOE,MAAO,CAAEG,QAAS,QAAUtC,UAAW,EAA9C,SACI,eAAC,GAAD,CACI9B,GAAIsL,EAAGtL,GACPiG,aAAcqF,EAAGrF,aACjBnG,MAAOwL,EAAGxL,MACVkK,OAAQsB,EAAGtB,YANPsB,EAAGtL,YAVf,eAAC,IAAD,CAAUyD,GAAI,eCa3B8H,GAxBqC,WAChD,IAAMzM,EAAWoD,cAEjByI,qBAAU,WACFjK,GACA5B,GT0FsB,SAACA,GAC/BA,EAASI,EAAoB,YAC7BU,IAA4BoJ,MAAK,SAACK,GAC9BvK,EAPoD,CAAEkC,KAAM,WAAYwK,MAOnDnC,EAAKxK,OAC1BC,EAASI,EAAoB,sBS5F9B,IAPmD,MAS/B+C,YAAYT,GAAzBC,EAT4C,yBAU9Cf,EAAeuB,YAAYZ,GAA3BX,WAEF0K,EAAc7C,uBAChB,SAACzI,GACGhB,ETwFgB,SAACgB,GAAD,OAAmB,SAAChB,GAC5CA,EAASI,EAAoB,YAC7BU,EACoBE,GACfkJ,MAAK,SAACK,GAC0B,IAAzBA,EAAKxK,KAAKgH,WACV/G,EAzBL,CAAEkC,KAAM,eAAgByK,SAyBEpC,EAAKxK,KAAKA,KAAKkF,OAEpCnF,EAAqByK,EAAKxK,KAAMC,GAEpCA,EAASI,EAAoB,iBAEhCoK,OAAM,SAAClK,GACJD,EAAyBC,EAAON,GAChCA,EAASI,EAAoB,kBStGpBwM,CAAa5L,MAE1B,CAAChB,IAGL,OACI,eAAC,GAAD,CAAesM,YAAaA,EAAa1K,WAAYA,EAAYe,UAAWA,KC+BrEkK,GArCsD,SAAC9J,GAAW,IACrEnB,EAAgDmB,EAAhDnB,WAAYkL,EAAoC/J,EAApC+J,SAAUjL,EAA0BkB,EAA1BlB,cAAeF,EAAWoB,EAAXpB,OAC7C,OACI,iCACI,eAACuB,GAAD,IACA,gBAAC,IAAD,CAAQ6J,SAAS,SAAjB,UACI,eAAC,IAAD,CAAS9J,QAAS,QAASkC,MAAO,CAAE6H,gBAAiB,WAArD,SACKpL,GACG,uCACI,eAAC,IAAD,CAAYqL,KAAK,QAAQ3G,MAAM,YAAY4G,aAAW,OAAtD,SACI,eAACC,EAAA,EAAD,MAGJ,eAAC,IAAD,CAAQ7G,MAAM,UAAUI,QAASoG,EAAjC,yBAMA,YAAXnL,GAAwB,eAAC,IAAD,CAAgB2E,MAAO,iBAEpD,eAAC,IAAD,CAAW8G,OAAK,EAAhB,SACMvL,EAGE,gBAAC,IAAD,WACI,eAAC,IAAD,CAAOwL,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,eAAC,GAAD,OACpC,eAAC,IAAD,CAAOD,KAAK,YAAYC,OAAQ,kBAAM,eAAC,GAAD,OACtC,eAAC,IAAD,CAAOD,KAAM,OAAQC,OAAQ,kBAAM,yDACnC,eAAC,IAAD,CAAUC,KAAM,IAAK7I,GAAI,YAN7B,+BCdL8I,GAvBsB,WACjC,IAAMzN,EAAWoD,cAEjByI,qBAAU,WACN7L,EhB8GJ,uCAAO,WAAOA,GAAP,SAAA8G,EAAA,6DACH9G,EAASI,EAAoB,YAD1B,kBAGOJ,EAtCd,uCAAO,WAAOA,GAAP,eAAA8G,EAAA,6DACH9G,EAASI,EAAoB,YAD1B,kBAG+BU,IAH/B,8BAGsDf,KAHtD,OAI6B,KADtB2N,EAHP,QAIc3G,YACT/G,EAASmC,EAAYuL,EAAS3N,OAC9BC,EAASqC,GAAiB,KAE1BrC,EAASqC,GAAiB,IAR/B,kDAWChC,EAAyB,EAAD,GAAQL,GAXjC,yBAaCA,EAASI,EAAoB,cAb9B,6EAAP,uDAmCO,OAICJ,EA/DuC,CAAEkC,KAAM,kBAAmByL,SA+D5C,IAJvB,gDAMCtN,EAAyB,EAAD,GAAQL,GANjC,yBAQCA,EAASI,EAAoB,cAR9B,4EAAP,yDgB7GG,IALoC,MAOO+C,YAAYZ,GAAlDZ,EAP+B,EAO/BA,OAAQE,EAPuB,EAOvBA,cAAeD,EAPQ,EAORA,WAM/B,OACI,eAAC,GAAD,CACIC,cAAeA,EACfD,WAAYA,EACZkL,SARS,WACb9M,EhBuFJ,uCAAO,WAAOA,GAAP,SAAA8G,EAAA,6DACH9G,EAASI,EAAoB,YAD1B,kBAG+BU,IAH/B,8BAGsDf,KAHtD,OAI6B,IAJ7B,OAIcgH,aACT/G,EAASmC,EAAY,CAAEH,MAAO,GAAIC,MAAO,GAAIF,OAAQ,KACrD/B,EAASqC,GAAiB,KAN/B,kDASChC,EAAyB,EAAD,GAAQL,GATjC,yBAWCA,EAASI,EAAoB,cAX9B,6EAAP,wDgB/EQuB,OAAQA,K,mBClBdiM,GAAcC,aAAgB,CAChChL,MVkDwB,WAAgE,IAA/DL,EAA8D,uDAAtDd,GAAcyK,EAAwC,uCACvF,OAAQA,EAAOjK,MACX,IAAK,cACD,IAAM4L,EAAS,eAAQtL,GACjBK,EAAQiL,EAAU3B,EAAO9K,YACzB0M,EAAWlL,EAAMqI,QAAO,SAACrB,GAAD,OAAOA,EAAE3I,KAAOiL,EAAO7K,UAErD,OADAwM,EAAU3B,EAAO9K,YAAc0M,EACxBD,EAEX,IAAK,WACD,IAAME,EAAc,eAAQxL,GACtBK,EAAQmL,EAAe7B,EAAOpD,KAAKkF,YACnCC,EAA8B,2BAAQ/B,EAAOpD,MAAf,IAAqB5B,aAAc,SACjE4G,EAAQ,CAAIG,GAAJ,oBAAoBrL,IAElC,OADAmL,EAAe7B,EAAOpD,KAAKkF,YAAcF,EAClCC,EAEX,IAAK,qBACD,IAAIG,EAAgB3L,EAAM2J,EAAO9K,YAC7B+M,EAAgBD,EAAczC,KAAI,SAAC7B,GAAD,OAClCA,EAAE3I,KAAOiL,EAAO7K,OAAhB,2BAA8BuI,GAA9B,IAAiClI,OAAQwK,EAAOxK,SAAWkI,KAI/D,OADArH,EAAM2J,EAAO9K,YAAc+M,EACpB,eAAK5L,GAEhB,IAAK,oBACD,IAAI2L,EAAgB3L,EAAM2J,EAAO9K,YAC7B+M,EAAgBD,EAAczC,KAAI,SAAC7B,GAAD,OAClCA,EAAE3I,KAAOiL,EAAO7K,OAAhB,2BAA8BuI,GAA9B,IAAiC7I,MAAOmL,EAAOnL,QAAU6I,KAI7D,OADArH,EAAM2J,EAAO9K,YAAc+M,EACpB,eAAK5L,GAEhB,IAAK,eACD,OAAO,2BACAA,GADP,mBAEK2J,EAAOQ,SAASzL,GAAK,KAG9B,IAAK,kBACD,IAAMmN,EAAS,eAAQ7L,GAEvB,cADO6L,EAAUlC,EAAOjL,IACjBmN,EAEX,IAAK,WACD,IAAMP,EAAS,eAAQtL,GAIvB,OAHA2J,EAAOO,MAAM4B,SAAQ,SAAC9B,GAClBsB,EAAUtB,EAAGtL,IAAM,MAEhB4M,EACX,IAAK,YACD,IAAMS,EAAY,eAAQ/L,GACpBgM,EAAoB,aAAOrC,EAAOtJ,OAClC4L,EAAwCD,EAAqB9C,KAAI,SAAC7B,GAAD,mBAAC,eACjEA,GADgE,IAEnE1C,aAAc,YAGlB,OADAoH,EAAapC,EAAO9K,YAAcoN,EAC3BF,EACX,IAAK,2BACD,IAAMxF,EAAOvG,EAAM2J,EAAOjF,QAAQ0C,MAAK,SAACC,GAAD,OAAOA,EAAE3I,KAAOiL,EAAO7K,UAI9D,OAHIyH,IACAA,EAAK5B,aAAegF,EAAOhF,cAExB,eAAK3E,GAChB,QACI,OAAOA,IUrHfG,UZoC4B,WAGC,IAF7BH,EAE4B,uDAFpBd,GACRyK,EAC4B,uCAC5B,OAAQA,EAAOjK,MACX,IAAK,kBACD,OAAOM,EAAM0I,QAAO,SAACsB,GAAD,OAAQA,EAAGtL,KAAOiL,EAAOjL,MAEjD,IAAK,eACD,IAAMgK,EAA2B,MAC3B/D,EAAkC,OAClCuH,EAAO,2BAAQvC,EAAOQ,UAAf,IAAyBzB,OAAQA,EAAQ/D,aAAcA,IACpE,MAAM,GAAN,oBAAW3E,GAAX,CAAkBkM,IAEtB,IAAK,wBACD,IAAM/B,EAAWnK,EAAMoH,MAAK,SAAC4C,GAAD,OAAQA,EAAGtL,KAAOiL,EAAOjL,MAIrD,OAHIyL,IACAA,EAAS3L,MAAQmL,EAAOnL,OAErB,aAAIwB,GAEf,IAAK,yBACD,IAAMmK,EAAWnK,EAAMoH,MAAK,SAAC4C,GAAD,OAAQA,EAAGtL,KAAOiL,EAAOjL,MAIrD,OAHIyL,IACAA,EAASzB,OAASiB,EAAOjB,QAEtB,aAAI1I,GAEf,IAAK,WACD,OAAO2J,EAAOO,MAAMhB,KAAI,SAACc,GAAD,mBAAC,eAAaA,GAAd,IAAkBtB,OAAQ,MAAO/D,aAAc,YAC3E,IAAK,sBACD,IAAMwF,EAAWnK,EAAMoH,MAAK,SAAC4C,GAAD,OAAQA,EAAGtL,KAAOiL,EAAOjF,UAIrD,OAHIyF,IACAA,EAASxF,aAAegF,EAAOhF,cAE5B,aAAI3E,GACf,QACI,OAAOA,IYxEfC,IjBsBsB,WAGC,IAFvBD,EAEsB,uDAFOd,EAC7ByK,EACsB,uCACtB,OAAQA,EAAOjK,MACX,IAAK,iBACD,OAAO,2BAAKM,GAAZ,IAAmBb,OAAQwK,EAAOxK,SACtC,IAAK,gBACD,OAAO,2BAAKa,GAAZ,IAAmBlC,MAAO6L,EAAO7L,QACrC,IAAK,kBACD,OAAO,2BAAKkC,GAAZ,IAAmBlC,MAAO,OAC9B,IAAK,eAED,OADAkC,EAAMV,KAAOqK,EAAO/J,SACb,eAAKI,GAChB,IAAK,kBACD,OAAO,2BAAKA,GAAZ,IAAmBZ,WAAYuK,EAAO7J,SAC1C,IAAK,kBACD,OAAO,2BAAKE,GAAZ,IAAmBX,cAAesK,EAAOwB,UAC7C,QACI,OAAOnL,MiBtCNmM,GAAQC,aAAYhB,GAAaiB,aAAgBC,OAK9DC,OAAOJ,MAAQA,GCff,IAYeK,GAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBhF,MAAK,YAAkD,IAA/CiF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCApBO,IAASjC,OACL,eAAC,IAAMkC,WAAP,UACI,eAAC,IAAD,UACI,eAAC,IAAD,CAAUd,MAAOA,GAAjB,SACI,eAAC,GAAD,UAIZe,SAASC,eAAe,SAG5BX,O","file":"static/js/main.6f23a9cb.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"d99d4953-dcf7-4e1d-821f-2ba7a1f58bc9\",\r\n    },\r\n});\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>(\"todo-lists\");\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", {\r\n            title: title,\r\n        });\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, { title: title });\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {\r\n            title: taskTitile,\r\n        });\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`,\r\n            model\r\n        );\r\n    },\r\n    loginIn(LoginingData: LoginingDataType) {\r\n        return instance.post<ResponseType<{ userId: number }>>(\"auth/login\", LoginingData);\r\n    },\r\n    authMe() {\r\n        return instance.get<\r\n            ResponseType<{\r\n                userId: number;\r\n                email: string;\r\n                login: string;\r\n            }>\r\n        >(\"auth/me\");\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(\"auth/login\");\r\n    },\r\n};\r\n\r\nexport type TodolistType = {\r\n    id: string;\r\n    title: string;\r\n    addedDate: string;\r\n    order: number;\r\n};\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number;\r\n    messages: Array<string>;\r\n    data: D;\r\n};\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\nexport type TaskType = {\r\n    description: string;\r\n    title: string;\r\n    status: TaskStatuses;\r\n    priority: TaskPriorities;\r\n    startDate: string;\r\n    deadline: string;\r\n    id: string;\r\n    todoListId: string;\r\n    order: number;\r\n    addedDate: string;\r\n};\r\ntype UpdateTaskModelType = {\r\n    title: string;\r\n    description: string;\r\n    status: number;\r\n    priority: number;\r\n    startDate: string;\r\n    deadline: string;\r\n};\r\ntype GetTasksResponse = {\r\n    error: string | null;\r\n    totalCount: number;\r\n    items: TaskType[];\r\n};\r\nexport type LoginingDataType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe?: boolean;\r\n    captcha?: boolean;\r\n};\r\n","import { Dispatch } from \"redux\";\r\nimport { ResponseType } from \"../../../main/server-api/todolists-api\";\r\nimport {\r\n    changeLoadingStatus,\r\n    ChangeLoadingStatusType,\r\n    setAppError,\r\n    SetAppErrorType,\r\n} from \"../../../main/bll/reducers/app-reducer\";\r\n\r\nexport const handleServerAppError = <T>(\r\n    data: ResponseType<T>,\r\n    dispatch: ErrorUtilsDispatchType\r\n) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]));\r\n    } else {\r\n        dispatch(setAppError(\"Some error occurred\"));\r\n    }\r\n    dispatch(changeLoadingStatus(\"succeeded\"));\r\n};\r\n\r\nexport const handleServerNetworkError = (\r\n    error: { message: string },\r\n    dispatch: ErrorUtilsDispatchType\r\n) => {\r\n    dispatch(setAppError(error.message));\r\n    dispatch(changeLoadingStatus(\"failed\"));\r\n};\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorType | ChangeLoadingStatusType>;\r\n","import { Dispatch } from \"redux\";\r\nimport { handleServerNetworkError } from \"../../../utils/features/errors/error-utils\";\r\nimport { LoginingDataType, todolistsAPI } from \"../../server-api/todolists-api\";\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\nexport type appReducerStateType = typeof initialState;\r\nexport type AppActionType =\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ResetErrorType\r\n    | SetUserDataType\r\n    | IsLoginingChangeType\r\n    | OnInitializedType;\r\nexport type ChangeLoadingStatusType = ReturnType<typeof changeLoadingStatus>;\r\nexport type SetAppErrorType = ReturnType<typeof setAppError>;\r\nexport type ResetErrorType = ReturnType<typeof resetError>;\r\nexport type SetUserDataType = ReturnType<typeof setUserData>;\r\nexport type IsLoginingChangeType = ReturnType<typeof isLoginingChange>;\r\nexport type OnInitializedType = ReturnType<typeof onInitalized>;\r\n\r\nconst initialState = {\r\n    status: \"loading\" as RequestStatusType,\r\n    error: null as string | null,\r\n    isLogining: false,\r\n    isInitialized: false,\r\n    auth: {\r\n        userId: 0,\r\n        email: \"\",\r\n        login: \"\",\r\n    },\r\n};\r\n\r\nexport const appReducer = (\r\n    state: appReducerStateType = initialState,\r\n    action: AppActionType\r\n): appReducerStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\":\r\n            return { ...state, status: action.status };\r\n        case \"APP/SET-ERROR\":\r\n            return { ...state, error: action.error };\r\n        case \"APP/RESET-ERROR\":\r\n            return { ...state, error: null };\r\n        case \"APP/LOGINING\":\r\n            state.auth = action.userData;\r\n            return { ...state };\r\n        case \"APP/IS-LOGINING\":\r\n            return { ...state, isLogining: action.logVal };\r\n        case \"APP/INITIALIZED\":\r\n            return { ...state, isInitialized: action.initVal };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const changeLoadingStatus = (status: RequestStatusType) =>\r\n    ({ type: \"APP/SET-STATUS\", status } as const);\r\nexport const setAppError = (error: string) => ({ type: \"APP/SET-ERROR\", error } as const);\r\nexport const resetError = () => ({ type: \"APP/RESET-ERROR\" } as const);\r\nexport const setUserData = (userData: { userId: number; email: string; login: string }) =>\r\n    ({ type: \"APP/LOGINING\", userData } as const);\r\nexport const isLoginingChange = (logVal: boolean) => ({ type: \"APP/IS-LOGINING\", logVal } as const);\r\nexport const onInitalized = (initVal: boolean) => ({ type: \"APP/INITIALIZED\", initVal } as const);\r\n\r\nexport const logining = (loginingData: LoginingDataType) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(changeLoadingStatus(\"loading\"));\r\n        try {\r\n            const { resultCode, data, messages } = await (\r\n                await todolistsAPI.loginIn(loginingData)\r\n            ).data;\r\n            const userId = data.userId;\r\n            if (resultCode === 0) {\r\n                dispatch(setUserData({ userId, email: \"\", login: \"\" }));\r\n                dispatch(isLoginingChange(true));\r\n            } else {\r\n                dispatch(setAppError(messages[0]));\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        } finally {\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n        }\r\n    };\r\n};\r\nexport const authMe = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(changeLoadingStatus(\"loading\"));\r\n        try {\r\n            const response = await (await todolistsAPI.authMe()).data;\r\n            if (response.resultCode === 0) {\r\n                dispatch(setUserData(response.data));\r\n                dispatch(isLoginingChange(true));\r\n            } else {\r\n                dispatch(isLoginingChange(false));\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        } finally {\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n        }\r\n    };\r\n};\r\nexport const logout = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(changeLoadingStatus(\"loading\"));\r\n        try {\r\n            const response = await (await todolistsAPI.logout()).data;\r\n            if (response.resultCode === 0) {\r\n                dispatch(setUserData({ email: \"\", login: \"\", userId: 0 }));\r\n                dispatch(isLoginingChange(false));\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        } finally {\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n        }\r\n    };\r\n};\r\n\r\nexport const initialized = () => {\r\n    return async (dispatch: any) => {\r\n        dispatch(changeLoadingStatus(\"loading\"));\r\n        try {\r\n            await dispatch(authMe());\r\n            dispatch(onInitalized(true));\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        } finally {\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n        }\r\n    };\r\n};\r\n","import { AppRootStateType } from '../../main/bll/store'\r\n\r\nexport const getAppState = (state: AppRootStateType)=> state.app\r\nexport const getTodoState = (state: AppRootStateType)=> state.todolists\r\nexport const getTaskState = (state: AppRootStateType)=> state.tasks","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../../../main/bll/store\";\r\nimport { resetError } from \"../../../../main/bll/reducers/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>((state) => state.app.error);\r\n    const dispatch = useDispatch();\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n        dispatch(resetError());\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error != null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    TextField,\r\n    Button,\r\n    Grid,\r\n} from \"@material-ui/core\";\r\nimport { useFormik } from \"formik\";\r\nimport Paper from \"@material-ui/core/Paper/Paper\";\r\nimport { LoginingDataType } from \"../../../main/server-api/todolists-api\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype LoginingPropsType = {\r\n    loginIn: (loginingData: LoginingDataType) => void;\r\n    isLoginig: boolean;\r\n};\r\n\r\ntype FormErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n};\r\n\r\nexport const Logining: React.FunctionComponent<LoginingPropsType> = (props) => {\r\n    const { loginIn, isLoginig } = props;\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n            captcha: true,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"This field required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"This field required\";\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            loginIn(values);\r\n        },\r\n    });\r\n\r\n    if (isLoginig) return <Redirect to={\"/\"} />;\r\n\r\n    return (\r\n        <Grid container direction={\"column\"} justify={\"center\"} alignItems={\"center\"}>\r\n            <Grid item xs={4} style={{ marginTop: \"100px\" }}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Paper style={{ padding: \"10px\" }} elevation={3}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <p>\r\n                                    To log in get registered\r\n                                    <a\r\n                                        href={\"https://social-network.samuraijs.com/\"}\r\n                                        target={\"_blank\"}\r\n                                    >\r\n                                        here\r\n                                    </a>\r\n                                </p>\r\n                                <p>or use common test account credentials:</p>\r\n                                <p>Email: free@samuraijs.com</p>\r\n                                <p>Password: free</p>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    name={\"email\"}\r\n                                    value={formik.values.email}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.email && formik.errors.email ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    name={\"password\"}\r\n                                    value={formik.values.password}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                />\r\n                                {formik.touched.password && formik.errors.password ? (\r\n                                    <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                                <FormControlLabel\r\n                                    label={\"Remember me\"}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            name={\"rememberMe\"}\r\n                                            value={formik.values.rememberMe}\r\n                                            onChange={formik.handleChange}\r\n                                        />\r\n                                    }\r\n                                />\r\n                                <Button\r\n                                    type={\"submit\"}\r\n                                    variant={\"contained\"}\r\n                                    color={\"primary\"}\r\n                                    onClick={formik.submitForm}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </Paper>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LoginingDataType } from \"../../../main/server-api/todolists-api\";\r\nimport { getAppState } from \"../../selectors/selectors\";\r\nimport { logining } from \"../../../main/bll/reducers/app-reducer\";\r\nimport { Logining } from \"./Logining\";\r\n\r\nconst LoginingContainer: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { isLogining } = useSelector(getAppState);\r\n\r\n    const loginIn = (loginingData: LoginingDataType) => {\r\n        dispatch(logining(loginingData));\r\n    };\r\n\r\n    return <Logining loginIn={loginIn} isLoginig={isLogining} />;\r\n};\r\n\r\nexport default LoginingContainer;\r\n","import { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { todolistsAPI, TodolistType } from \"../../server-api/todolists-api\";\r\nimport {\r\n    handleServerAppError,\r\n    handleServerNetworkError,\r\n} from \"../../../utils/features/errors/error-utils\";\r\nimport {\r\n    changeLoadingStatus,\r\n    ChangeLoadingStatusType,\r\n    RequestStatusType,\r\n    SetAppErrorType,\r\n} from \"./app-reducer\";\r\nimport { AppRootStateType } from \"../store\";\r\n\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolist>;\r\nexport type AddTodolistType = ReturnType<typeof addTodolist>;\r\nexport type ChangeTodolistTitleType = ReturnType<typeof changeTodolistTitle>;\r\nexport type ChangeTodolistFilterType = ReturnType<typeof changeTodolistFilter>;\r\nexport type SetTodolistType = ReturnType<typeof setTodolist>;\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatus>;\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType;\r\n    entityStatus: RequestStatusType;\r\n};\r\nexport type TodolistThunkCreatorType = ThunkAction<\r\n    Promise<void>,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType\r\n>;\r\ntype ActionsType =\r\n    | RemoveTodolistType\r\n    | AddTodolistType\r\n    | ChangeTodolistTitleType\r\n    | ChangeTodolistFilterType\r\n    | SetTodolistType\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType;\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nexport const todolistsReducer = (\r\n    state = initialState,\r\n    action: ActionsType\r\n): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter((tl) => tl.id !== action.id);\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const filter: FilterValuesType = \"all\";\r\n            const entityStatus: RequestStatusType = \"idle\";\r\n            const newTodo = { ...action.todolist, filter: filter, entityStatus: entityStatus };\r\n            return [...state, newTodo];\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            const todolist = state.find((tl) => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state];\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const todolist = state.find((tl) => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n        case \"SET-TODO\":\r\n            return action.todos.map((tl) => ({ ...tl, filter: \"all\", entityStatus: \"idle\" }));\r\n        case \"CHANGE-ENTITYSTATUS\":\r\n            const todolist = state.find((tl) => tl.id === action.todoId);\r\n            if (todolist) {\r\n                todolist.entityStatus = action.entityStatus;\r\n            }\r\n            return [...state];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const removeTodolist = (todolistId: string) => {\r\n    return { type: \"REMOVE-TODOLIST\", id: todolistId } as const;\r\n};\r\nexport const addTodolist = (todolist: TodolistType) => {\r\n    return { type: \"ADD-TODOLIST\", todolist } as const;\r\n};\r\nexport const changeTodolistTitle = (id: string, title: string) => {\r\n    return { type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title } as const;\r\n};\r\nexport const changeTodolistFilter = (id: string, filter: FilterValuesType) => {\r\n    return { type: \"CHANGE-TODOLIST-FILTER\", id: id, filter: filter } as const;\r\n};\r\nexport const setTodolist = (todos: Array<TodolistType>) => ({ type: \"SET-TODO\", todos } as const);\r\nexport const changeTodolistEntityStatus = (todoId: string, entityStatus: RequestStatusType) =>\r\n    ({ type: \"CHANGE-ENTITYSTATUS\", todoId, entityStatus } as const);\r\n\r\nexport const setTodoThunk = () => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"));\r\n    todolistsAPI.getTodolists().then((resp) => {\r\n        dispatch(setTodolist(resp.data));\r\n        dispatch(changeLoadingStatus(\"succeeded\"));\r\n    });\r\n};\r\nexport const addTodoThunk = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"));\r\n    todolistsAPI\r\n        .createTodolist(title)\r\n        .then((resp) => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(addTodolist(resp.data.data.item));\r\n            } else {\r\n                handleServerAppError(resp.data, dispatch);\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n        });\r\n};\r\nexport const deleteTodoThunk = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"));\r\n    dispatch(changeTodolistEntityStatus(id, \"loading\"));\r\n    todolistsAPI.deleteTodolist(id).then(() => {\r\n        dispatch(removeTodolist(id));\r\n        dispatch(changeTodolistEntityStatus(id, \"idle\"));\r\n        dispatch(changeLoadingStatus(\"succeeded\"));\r\n    });\r\n};\r\nexport const changeTitleTodoThunk = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"));\r\n    dispatch(changeTodolistEntityStatus(id, \"loading\"));\r\n    todolistsAPI\r\n        .updateTodolist(id, title)\r\n        .then((resp) => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitle(id, title));\r\n                dispatch(changeTodolistEntityStatus(id, \"succeeded\"));\r\n            } else {\r\n                handleServerAppError(resp.data, dispatch);\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n            dispatch(changeTodolistEntityStatus(id, \"succeeded\"));\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n            dispatch(changeTodolistEntityStatus(id, \"succeeded\"));\r\n        });\r\n};\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\nimport { IconButton, TextField } from \"@material-ui/core\";\r\nimport { AddBox } from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void;\r\n    disabled: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n};\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\");\r\n\r\n    let [title, setTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    };\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                error={!!error}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label=\"Title\"\r\n                helperText={error}\r\n                disabled={props.disabled === \"loading\"}\r\n            />\r\n            <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled === \"loading\"}>\r\n                <AddBox />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});\r\n","import {\r\n    AddTodolistType,\r\n    changeTodolistEntityStatus,\r\n    ChangeTodolistEntityStatusType,\r\n    RemoveTodolistType,\r\n    SetTodolistType,\r\n} from \"./todolists-reducer\";\r\nimport { TaskStatuses, TaskType, todolistsAPI } from \"../../server-api/todolists-api\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AppRootStateType } from \"../store\";\r\nimport {\r\n    changeLoadingStatus,\r\n    ChangeLoadingStatusType,\r\n    RequestStatusType,\r\n    setAppError,\r\n    SetAppErrorType,\r\n} from \"./app-reducer\";\r\nimport {\r\n    handleServerAppError,\r\n    handleServerNetworkError,\r\n} from \"../../../utils/features/errors/error-utils\";\r\n\r\nexport type TaskStateRootType = TaskType & {\r\n    entityStatus: RequestStatusType;\r\n};\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskStateRootType>;\r\n};\r\nexport type RemoveTaskType = ReturnType<typeof removeTask>;\r\nexport type AddTaskType = ReturnType<typeof addTask>;\r\nexport type ChangeTaskStatusType = ReturnType<typeof changeTaskStatus>;\r\nexport type ChangeTaskTitleType = ReturnType<typeof changeTaskTitle>;\r\nexport type SetTasksType = ReturnType<typeof setTasks>;\r\nexport type ChangeTaskEntityStatusType = ReturnType<typeof changeTaskEntityStatus>;\r\nexport type TodolistThunkCreatorType = ThunkAction<\r\n    Promise<void>,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType\r\n>;\r\ntype ActionsType =\r\n    | RemoveTaskType\r\n    | AddTaskType\r\n    | ChangeTaskStatusType\r\n    | ChangeTaskTitleType\r\n    | AddTodolistType\r\n    | RemoveTodolistType\r\n    | SetTodolistType\r\n    | SetTasksType\r\n    | ChangeLoadingStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\n    | ChangeTaskEntityStatusType;\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = { ...state };\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter((t) => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopyThree = { ...state };\r\n            const tasks = stateCopyThree[action.task.todoListId];\r\n            const uppdateTask: TaskStateRootType = { ...action.task, entityStatus: \"idle\" };\r\n            const newTasks = [uppdateTask, ...tasks];\r\n            stateCopyThree[action.task.todoListId] = newTasks;\r\n            return stateCopyThree;\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks.map((t) =>\r\n                t.id === action.taskId ? { ...t, status: action.status } : t\r\n            );\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return { ...state };\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks.map((t) =>\r\n                t.id === action.taskId ? { ...t, title: action.title } : t\r\n            );\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return { ...state };\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: [],\r\n            };\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = { ...state };\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODO\":\r\n            const stateCopy = { ...state };\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = [];\r\n            });\r\n            return stateCopy;\r\n        case \"SET-TASKS\":\r\n            const stateCopyTwo = { ...state };\r\n            const tasksFromCurrentTodo = [...action.tasks];\r\n            const updateTasks: Array<TaskStateRootType> = tasksFromCurrentTodo.map((t) => ({\r\n                ...t,\r\n                entityStatus: \"idle\",\r\n            }));\r\n            stateCopyTwo[action.todolistId] = updateTasks;\r\n            return stateCopyTwo;\r\n        case \"CHANGE-ENTITYSTATUS-TASK\":\r\n            const task = state[action.todoId].find((t) => t.id === action.taskId);\r\n            if (task) {\r\n                task.entityStatus = action.entityStatus;\r\n            }\r\n            return { ...state };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const removeTask = (taskId: string, todolistId: string) => {\r\n    return { type: \"REMOVE-TASK\", taskId, todolistId } as const;\r\n};\r\nexport const addTask = (task: TaskType, todolistId: string) => {\r\n    return { type: \"ADD-TASK\", task, todolistId } as const;\r\n};\r\nexport const changeTaskStatus = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return { type: \"CHANGE-TASK-STATUS\", status, todolistId, taskId } as const;\r\n};\r\nexport const changeTaskTitle = (taskId: string, title: string, todolistId: string) => {\r\n    return { type: \"CHANGE-TASK-TITLE\", title, todolistId, taskId } as const;\r\n};\r\nexport const setTasks = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return { type: \"SET-TASKS\", tasks, todolistId } as const;\r\n};\r\nexport const changeTaskEntityStatus = (\r\n    todoId: string,\r\n    taskId: string,\r\n    entityStatus: RequestStatusType\r\n) => ({ type: \"CHANGE-ENTITYSTATUS-TASK\", todoId, taskId, entityStatus } as const);\r\n\r\nexport const setTasksThunk = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"));\r\n    todolistsAPI.getTasks(todolistId).then((resp) => {\r\n        dispatch(setTasks(resp.data.items, todolistId));\r\n        dispatch(changeLoadingStatus(\"succeeded\"));\r\n    });\r\n};\r\nexport const deleteTasksThunk = (todolistId: string, taskID: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"));\r\n    dispatch(changeTaskEntityStatus(todolistId, taskID, \"loading\"));\r\n    todolistsAPI.deleteTask(todolistId, taskID).then(() => {\r\n        dispatch(removeTask(taskID, todolistId));\r\n        dispatch(changeLoadingStatus(\"succeeded\"));\r\n        dispatch(changeTaskEntityStatus(todolistId, taskID, \"succeeded\"));\r\n    });\r\n};\r\nexport const addTaskThunk = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeLoadingStatus(\"loading\"));\r\n    dispatch(changeTodolistEntityStatus(todolistId, \"loading\"));\r\n    todolistsAPI\r\n        .createTask(todolistId, taskTitile)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTask(res.data.data.item, todolistId));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n            dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"));\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeLoadingStatus(\"succeeded\"));\r\n            dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"));\r\n        });\r\n};\r\nexport const changeTaskStatusThunk = (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodo = allTasksFromState[todolistId];\r\n        const currentTask = tasksForCurrentTodo.find((t) => t.id === taskId);\r\n        if (currentTask) {\r\n            dispatch(changeLoadingStatus(\"loading\"));\r\n            dispatch(changeTaskEntityStatus(todolistId, taskId, \"loading\"));\r\n            todolistsAPI\r\n                .updateTask(todolistId, taskId, {\r\n                    title: currentTask.title,\r\n                    startDate: currentTask.startDate,\r\n                    priority: currentTask.priority,\r\n                    description: currentTask.description,\r\n                    deadline: currentTask.deadline,\r\n                    status: status,\r\n                })\r\n                .then(() => {\r\n                    dispatch(changeTaskStatus(taskId, status, todolistId));\r\n                    dispatch(changeLoadingStatus(\"succeeded\"));\r\n                    dispatch(changeTaskEntityStatus(todolistId, taskId, \"succeeded\"));\r\n                });\r\n        }\r\n    };\r\n};\r\nexport const changeTaskTitleThunk = (todolistId: string, taskId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodo = allTasksFromState[todolistId];\r\n        const currentTask = tasksForCurrentTodo.find((t) => t.id === taskId);\r\n        if (currentTask) {\r\n            dispatch(changeLoadingStatus(\"loading\"));\r\n            dispatch(changeTaskEntityStatus(todolistId, taskId, \"loading\"));\r\n            todolistsAPI\r\n                .updateTask(todolistId, taskId, {\r\n                    title: title,\r\n                    startDate: currentTask.startDate,\r\n                    priority: currentTask.priority,\r\n                    description: currentTask.description,\r\n                    deadline: currentTask.deadline,\r\n                    status: currentTask.status,\r\n                })\r\n                .then((resp) => {\r\n                    if (resp.data.resultCode === 0) {\r\n                        dispatch(changeTaskTitle(taskId, title, todolistId));\r\n                    } else {\r\n                        handleServerAppError(resp.data, dispatch);\r\n                    }\r\n                    dispatch(changeLoadingStatus(\"succeeded\"));\r\n                    dispatch(changeTaskEntityStatus(todolistId, taskId, \"succeeded\"));\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch);\r\n                    dispatch(changeLoadingStatus(\"succeeded\"));\r\n                    dispatch(changeTodolistEntityStatus(todolistId, \"succeeded\"));\r\n                });\r\n        }\r\n    };\r\n};\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { RequestStatusType } from \"../../../main/bll/reducers/app-reducer\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string;\r\n    onChange: (newValue: string) => void;\r\n    entityStatusForTodo?: RequestStatusType;\r\n    entityStatusForTask?: RequestStatusType;\r\n};\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    };\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    };\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n\r\n    return editMode ? (\r\n        <TextField\r\n            value={title}\r\n            onChange={changeTitle}\r\n            autoFocus\r\n            onBlur={activateViewMode}\r\n            disabled={props.entityStatusForTodo === \"loading\"}\r\n        />\r\n    ) : (\r\n        <span\r\n            onDoubleClick={\r\n                props.entityStatusForTask !== \"loading\" && props.entityStatusForTodo !== \"loading\"\r\n                    ? activateEditMode\r\n                    : undefined\r\n            }\r\n        >\r\n            {props.value}\r\n        </span>\r\n    );\r\n});\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { Checkbox, IconButton } from \"@material-ui/core\";\r\nimport { EditableSpan } from \"../editableSpan/EditableSpan\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { TaskStatuses, TaskType } from \"../../../main/server-api/todolists-api\";\r\nimport { RequestStatusType } from \"../../../main/bll/reducers/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType;\r\n    entityStatusForTask: RequestStatusType;\r\n    onTitleChangeHandler: (newValue: string) => void;\r\n    onClickHandler: () => void;\r\n    onChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void;\r\n};\r\nconst Task: React.FunctionComponent<TaskPropsType> = React.memo((props) => {\r\n    const { task, entityStatusForTask, onTitleChangeHandler, onClickHandler, onChangeHandler } =\r\n        props;\r\n\r\n    return (\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n                disabled={entityStatusForTask === \"loading\"}\r\n            />\r\n            <EditableSpan\r\n                value={task.title}\r\n                onChange={onTitleChangeHandler}\r\n                entityStatusForTask={entityStatusForTask}\r\n            />\r\n            <IconButton onClick={onClickHandler} disabled={entityStatusForTask === \"loading\"}>\r\n                <Delete />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Task;\r\n","import React, { ChangeEvent, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { RequestStatusType } from \"../../../main/bll/reducers/app-reducer\";\r\nimport {\r\n    changeTaskStatusThunk,\r\n    changeTaskTitleThunk,\r\n    deleteTasksThunk,\r\n} from \"../../../main/bll/reducers/tasks-reducer\";\r\nimport { TaskStatuses, TaskType } from \"../../../main/server-api/todolists-api\";\r\nimport Task from \"./Task\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType;\r\n    todolistId: string;\r\n    entityStatusForTask: RequestStatusType;\r\n};\r\n\r\nconst TasksContainer: React.FunctionComponent<TaskPropsType> = (props) => {\r\n    const { task, todolistId, entityStatusForTask } = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const changeStatus = useCallback(\r\n        (id: string, status: TaskStatuses, todolistId: string) => {\r\n            dispatch(changeTaskStatusThunk(todolistId, id, status));\r\n        },\r\n        [todolistId]\r\n    );\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleThunk(todolistId, id, newTitle));\r\n    }, []);\r\n\r\n    const onClickHandler = useCallback(\r\n        () => dispatch(deleteTasksThunk(todolistId, task.id)),\r\n        [todolistId, task.id]\r\n    );\r\n\r\n    const onChangeHandler = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            changeStatus(\r\n                task.id,\r\n                newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n                todolistId\r\n            );\r\n        },\r\n        [task.id, todolistId]\r\n    );\r\n\r\n    const onTitleChangeHandler = useCallback(\r\n        (newValue: string) => {\r\n            changeTaskTitle(task.id, newValue, todolistId);\r\n        },\r\n        [task.id, todolistId]\r\n    );\r\n\r\n    return (\r\n        <Task\r\n            task={task}\r\n            entityStatusForTask={entityStatusForTask}\r\n            onTitleChangeHandler={onTitleChangeHandler}\r\n            onClickHandler={onClickHandler}\r\n            onChangeHandler={onChangeHandler}\r\n        />\r\n    );\r\n};\r\n\r\nexport default TasksContainer;\r\n","import React, { useCallback } from \"react\";\r\nimport { AddItemForm } from \"../../addItemForm/AddItemForm\";\r\nimport { EditableSpan } from \"../../editableSpan/EditableSpan\";\r\nimport { Button, IconButton } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { TaskStatuses } from \"../../../../main/server-api/todolists-api\";\r\nimport { FilterValuesType } from \"../../../../main/bll/reducers/todolists-reducer\";\r\nimport { TaskStateRootType } from \"../../../../main/bll/reducers/tasks-reducer\";\r\nimport { RequestStatusType } from \"../../../../main/bll/reducers/app-reducer\";\r\nimport TasksContainer from \"../../tasks/TaskContainer\";\r\n\r\ntype TodolistPropsType = {\r\n    id: string;\r\n    filter: FilterValuesType;\r\n    tasks: Array<TaskStateRootType>;\r\n    title: string;\r\n    entityStatus: RequestStatusType;\r\n    changeTodolistTitle: (title: string) => void;\r\n    removeTodolist: () => void;\r\n    addTask: (title: string) => void;\r\n    changeFilter: (newFilter: FilterValuesType, id: string) => void;\r\n};\r\n\r\nconst Todolist: React.FunctionComponent<TodolistPropsType> = React.memo((props) => {\r\n    const {\r\n        changeFilter,\r\n        filter,\r\n        tasks,\r\n        title,\r\n        changeTodolistTitle,\r\n        removeTodolist,\r\n        addTask,\r\n        id,\r\n        entityStatus,\r\n    } = props;\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", id), [id, changeFilter]);\r\n\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", id), [id, changeFilter]);\r\n\r\n    const onCompletedClickHandler = useCallback(\r\n        () => changeFilter(\"completed\", id),\r\n        [id, changeFilter]\r\n    );\r\n\r\n    let tasksFiltered: Array<TaskStateRootType> = [...tasks];\r\n\r\n    if (filter === \"active\") {\r\n        tasksFiltered = tasksFiltered.filter((t) => t.status === TaskStatuses.New);\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksFiltered = tasksFiltered.filter((t) => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan\r\n                    value={title}\r\n                    onChange={changeTodolistTitle}\r\n                    entityStatusForTodo={entityStatus}\r\n                />\r\n                <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatus} />\r\n            <div>\r\n                {tasksFiltered.map((t) => (\r\n                    <TasksContainer\r\n                        key={t.id}\r\n                        task={t}\r\n                        todolistId={id}\r\n                        entityStatusForTask={entityStatus}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <div style={{ paddingTop: \"10px\" }}>\r\n                <Button\r\n                    variant={filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    color={\"default\"}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    variant={filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color={\"primary\"}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    variant={filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={\"secondary\"}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Todolist;\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport {\r\n    changeTitleTodoThunk,\r\n    changeTodolistFilter,\r\n    deleteTodoThunk,\r\n    FilterValuesType,\r\n} from \"../../../../main/bll/reducers/todolists-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addTaskThunk, setTasksThunk } from \"../../../../main/bll/reducers/tasks-reducer\";\r\nimport Todolist from \"./Todolist\";\r\nimport { getTaskState } from \"../../../selectors/selectors\";\r\nimport { RequestStatusType } from \"../../../../main/bll/reducers/app-reducer\";\r\n\r\ntype TodolistContPropsType = {\r\n    id: string;\r\n    entityStatus: RequestStatusType;\r\n    title: string;\r\n    filter: FilterValuesType;\r\n};\r\n\r\nconst TodolistContainer: React.FunctionComponent<TodolistContPropsType> = React.memo((props) => {\r\n    const { id, entityStatus, title, filter } = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksThunk(id));\r\n    }, [id]);\r\n\r\n    let allTasksFromState = useSelector(getTaskState);\r\n\r\n    let tasks = allTasksFromState[id];\r\n\r\n    const addTask = useCallback(\r\n        (title: string) => {\r\n            dispatch(addTaskThunk(id, title));\r\n        },\r\n        [id]\r\n    );\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(deleteTodoThunk(props.id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(\r\n        (title: string) => {\r\n            dispatch(changeTitleTodoThunk(id, title));\r\n        },\r\n        [id]\r\n    );\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilter(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    return (\r\n        <Todolist\r\n            id={id}\r\n            addTask={addTask}\r\n            changeFilter={changeFilter}\r\n            changeTodolistTitle={changeTodolistTitle}\r\n            entityStatus={entityStatus}\r\n            filter={filter}\r\n            removeTodolist={removeTodolist}\r\n            tasks={tasks}\r\n            title={title}\r\n        />\r\n    );\r\n});\r\n\r\nexport default TodolistContainer;\r\n","import Grid from \"@material-ui/core/Grid/Grid\";\r\nimport Paper from \"@material-ui/core/Paper/Paper\";\r\nimport React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { TodolistDomainType } from \"../../../../main/bll/reducers/todolists-reducer\";\r\nimport { AddItemForm } from \"../../addItemForm/AddItemForm\";\r\nimport TodolistContainer from \"../todolist/TodolistContainer\";\r\n\r\ntype TodolistsPageType = {\r\n    isLogining: boolean;\r\n    addTodolist: (title: string) => void;\r\n    todolists: Array<TodolistDomainType>;\r\n};\r\n\r\nconst TodolistsPage: React.FunctionComponent<TodolistsPageType> = (props) => {\r\n    const { isLogining, addTodolist, todolists } = props;\r\n\r\n    if (!isLogining) return <Redirect to={\"/logining\"} />;\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{ padding: \"20px\" }}>\r\n                <AddItemForm addItem={addTodolist} disabled={\"idle\"} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map((tl) => {\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper style={{ padding: \"10px\" }} elevation={3}>\r\n                                <TodolistContainer\r\n                                    id={tl.id}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    title={tl.title}\r\n                                    filter={tl.filter}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    );\r\n                })}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodolistsPage;\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAppState, getTodoState } from \"../../../selectors/selectors\";\r\nimport { addTodoThunk, setTodoThunk } from \"../../../../main/bll/reducers/todolists-reducer\";\r\nimport TodolistsPage from \"./TodolistsPage\";\r\n\r\nconst TodolistsContainer: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (isLogining) {\r\n            dispatch(setTodoThunk());\r\n        } else return;\r\n    }, []);\r\n\r\n    const [...todolists] = useSelector(getTodoState);\r\n    const { isLogining } = useSelector(getAppState);\r\n\r\n    const addTodolist = useCallback(\r\n        (title: string) => {\r\n            dispatch(addTodoThunk(title));\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    return (\r\n        <TodolistsPage addTodolist={addTodolist} isLogining={isLogining} todolists={todolists} />\r\n    );\r\n};\r\n\r\nexport default TodolistsContainer;\r\n","import AppBar from \"@material-ui/core/AppBar/AppBar\"\r\nimport Button from \"@material-ui/core/Button/Button\"\r\nimport Container from \"@material-ui/core/Container/Container\"\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\"\r\nimport LinearProgress from \"@material-ui/core/LinearProgress/LinearProgress\"\r\nimport Toolbar from \"@material-ui/core/Toolbar/Toolbar\"\r\nimport { Menu } from \"@material-ui/icons\"\r\nimport React from \"react\"\r\nimport { Redirect, Route, Switch } from \"react-router-dom\"\r\nimport { ErrorSnackbar } from \"../../../../utils/features/errors/errorSnackBar/ErrorSnackbar\"\r\nimport LoginingContainer from \"../../../../utils/features/logining/LoginingContainer\"\r\nimport TodolistsContainer from \"../../../../utils/features/todolists/todolistsPage/TodolistsPageContainer\"\r\n\r\ntype InterfaceAppPropsType = {\r\n    isLogining: boolean\r\n    isInitialized: boolean\r\n    status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n    logoutMe: () => void\r\n}\r\n\r\nconst InterfaceApp: React.FunctionComponent<InterfaceAppPropsType> = (props) => {\r\n    const { isLogining, logoutMe, isInitialized, status } = props\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant={\"dense\"} style={{ backgroundColor: \"#00418c\" }}>\r\n                    {isLogining && (\r\n                        <>\r\n                            <IconButton edge=\"start\" color=\"secondary\" aria-label=\"menu\">\r\n                                <Menu />\r\n                            </IconButton>\r\n\r\n                            <Button color=\"inherit\" onClick={logoutMe}>\r\n                                Logout\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress color={\"secondary\"} />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                {!isInitialized ? (\r\n                    <div></div>\r\n                ) : (\r\n                    <Switch>\r\n                        <Route exact path=\"/\" render={() => <TodolistsContainer />} />\r\n                        <Route path=\"/logining\" render={() => <LoginingContainer />} />\r\n                        <Route path={\"/404\"} render={() => <h1>404: PAGE NOT FOUND</h1>} />\r\n                        <Redirect from={\"*\"} to={\"/404\"} />\r\n                    </Switch>\r\n                )}\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InterfaceApp\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { initialized, logout } from \"../../bll/reducers/app-reducer\";\r\nimport { getAppState } from \"../../../utils/selectors/selectors\";\r\nimport InterfaceApp from \"./InterfaceApp/InterfaceApp\";\r\n\r\nconst App: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initialized());\r\n    }, []);\r\n\r\n    const { status, isInitialized, isLogining } = useSelector(getAppState);\r\n\r\n    const logoutMe = () => {\r\n        dispatch(logout());\r\n    };\r\n\r\n    return (\r\n        <InterfaceApp\r\n            isInitialized={isInitialized}\r\n            isLogining={isLogining}\r\n            logoutMe={logoutMe}\r\n            status={status}\r\n        />\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { tasksReducer } from \"./reducers/tasks-reducer\";\r\nimport { todolistsReducer } from \"./reducers/todolists-reducer\";\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { appReducer } from \"./reducers/app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./main/ui/app/App\";\r\nimport { store } from \"./main/bll/store\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}